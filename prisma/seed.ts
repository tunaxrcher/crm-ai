import { faker } from '@faker-js/faker/locale/en'
import { EnumMediaType, PrismaClient } from '@prisma/client'

const bucket = process.env.DO_SPACES_BUCKET
const region = process.env.DO_SPACES_REGION

const prisma = new PrismaClient()

async function main() {
  // console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Seeding...')

  // // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ)
  // await cleanupDB()

  // console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...')

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á JobClass ‡πÅ‡∏•‡∏∞ JobLevel =============
  // const jobClasses = await createJobClasses()
  // console.log(
  //   `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JobClass ‡πÅ‡∏•‡∏∞ JobLevel ${jobClasses.length} ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`
  // )

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á User =============
  // // const users = await createUsers()
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User ${users.length} ‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Character =============
  // // const characters = await createCharacters(users, jobClasses)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Character ${characters.length} ‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Achievement =============
  // const achievements = await createAchievements()
  // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Achievement ${achievements.length} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏°‡∏≠‡∏ö Achievement ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Character =============
  // // const characterAchievements = await assignAchievements(
  // //   characters,
  // //   achievements,
  // //   users
  // // )
  // // console.log(
  // //   `‚úÖ ‡∏°‡∏≠‡∏ö Achievement ${characterAchievements.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`
  // // )

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Party =============
  // // const parties = await createParties(users)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Party ${parties.length} ‡∏ó‡∏µ‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Quest =============
  // const quests = await createQuests()
  // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Quest ${quests.length} ‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡πÄ‡∏û‡∏¥‡πà‡∏° AssignedQuest =============
  // // const assignedQuests = await assignQuests(characters, quests, users)
  // // console.log(`‚úÖ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ Quest ${assignedQuests.length} ‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡πà‡∏á QuestSubmission =============
  // // const questSubmissions = await submitQuests(characters, quests)
  // // console.log(
  // //   `‚úÖ ‡∏™‡πà‡∏á QuestSubmission ${questSubmissions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`
  // // )

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á LevelHistory =============
  // // const levelHistories = await createLevelHistories(characters)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á LevelHistory ${levelHistories.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á FeedItem =============
  // // const feedItems = await createFeedItems(
  // //   users,
  // //   questSubmissions,
  // //   levelHistories,
  // //   characterAchievements
  // // )
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á FeedItem ${feedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Story =============
  // // const stories = await createStories(users)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Story ${stories.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Like =============
  // // const likes = await createLikes(users, feedItems)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Like ${likes.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á Comment =============
  // // const comments = await createComments(users, feedItems)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Comment ${comments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á ReplyComment =============
  // // const replyComments = await createReplyComments(users, comments)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ReplyComment ${replyComments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á StoryView =============
  // // const storyViews = await createStoryViews(users, stories)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á StoryView ${storyViews.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // // ============= ‡∏™‡∏£‡πâ‡∏≤‡∏á UserToken =============
  // // const userTokens = await createUserTokens(users)
  // // console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á UserToken ${userTokens.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  const rewards = await createRewardItems()
  console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Reward Items ${rewards.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  // console.log('‚ú® ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
}

async function cleanupDB() {
  // ‡∏õ‡∏¥‡∏î foreign key checks ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  await prisma.$executeRawUnsafe('SET FOREIGN_KEY_CHECKS = 0;')

  // ‡πÉ‡∏ä‡πâ backticks ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á reserved words
  const tablesToClean = [
    'ReplyComment',
    'Comment',
    'Like',
    'StoryView',
    'Story',
    'TokenTransaction',
    'QuestToken',
    'TokenPurchase',
    'TokenShopItem',
    'QuestStreak',
    'TokenMultiplierEvent',
    'UserToken',
    'FeedItem',
    'LevelHistory',
    'QuestSubmission',
    'AssignedQuest',
    // 'PartyQuest',
    'Quest',
    // 'PartyMember',
    // 'Party',
    'CharacterAchievement',
    'Achievement',
    'Notification',
    'Ranking',
    'Character',
    'JobLevel',
    'JobClass',
    'User',
    'LevelRequirement',
  ]

  for (const table of tablesToClean) {
    try {
      // ‡πÉ‡∏ä‡πâ backticks ‡∏£‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
      await prisma.$executeRawUnsafe(`TRUNCATE TABLE \`${table}\`;`)
      console.log(`üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table} ‡πÅ‡∏•‡πâ‡∏ß`)
    } catch (error) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table} ‡πÑ‡∏î‡πâ: ${error}`)

      // ‡∏ñ‡πâ‡∏≤ TRUNCATE ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ DELETE ‡πÅ‡∏ó‡∏ô
      try {
        await prisma.$executeRawUnsafe(`DELETE FROM \`${table}\`;`)
        console.log(`üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table} ‡∏î‡πâ‡∏ß‡∏¢ DELETE ‡πÅ‡∏•‡πâ‡∏ß`)
      } catch (deleteError) {
        console.log(
          `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table} ‡∏î‡πâ‡∏ß‡∏¢ DELETE: ${deleteError}`
        )
      }
    }
  }

  // ‡πÄ‡∏õ‡∏¥‡∏î foreign key checks ‡∏Å‡∏•‡∏±‡∏ö
  await prisma.$executeRawUnsafe('SET FOREIGN_KEY_CHECKS = 1;')

  // MySQL ‡∏à‡∏∞ reset AUTO_INCREMENT ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ TRUNCATE
  console.log('üîÑ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á JobClass ‡πÅ‡∏•‡∏∞ JobLevel ==========
async function createJobClasses() {
  const jobClassData = [
    {
      name: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
      description:
        '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
      imageUrl: `https://${bucket}.${region}.digitaloceanspaces.com/marketing.png`,
      jobLevels: [
        {
          level: 1,
          requiredCharacterLevel: 1,
          title: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
          description: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î ‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏µ‡∏Å‡∏°‡∏≤‡∏Å',
          personaDescription:
            'Wearing wrinkled shirt holding old brochures, carrying phone with cracked screen',
        },
        {
          level: 10,
          requiredCharacterLevel: 10,
          title: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
          description:
            '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏î‡πâ',
          personaDescription:
            'Wearing neat shirt with new smartphone + small notebook',
        },
        {
          level: 35,
          requiredCharacterLevel: 35,
          title: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏°‡∏∑‡∏≠‡∏â‡∏°‡∏±‡∏á',
          description:
            '‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
          personaDescription:
            'Wearing light suit holding presentation tablet with basic graphic media',
        },
        {
          level: 60,
          requiredCharacterLevel: 60,
          title: '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
          description: '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ',
          personaDescription:
            'Wearing high-tech suit with bluetooth headset/mic and hologram graphs',
        },
        {
          level: 80,
          requiredCharacterLevel: 80,
          title: '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
          description:
            '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á',
          personaDescription:
            'Premium business suit with floating presentation screens, professional presenter',
        },
        {
          level: 99,
          requiredCharacterLevel: 99,
          title: '‡∏Å‡∏π‡∏£‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
          description:
            '‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î ‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ß‡∏á‡∏Å‡∏≤‡∏£',
          personaDescription:
            'Futuristic strategy suit, surrounded by UI holograms, executive-level aura',
        },
      ],
    },
    {
      name: '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
      description:
        '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏©‡∏µ',
      imageUrl: `https://${bucket}.${region}.digitaloceanspaces.com/accounthing.png`,
      jobLevels: [
        {
          level: 1,
          requiredCharacterLevel: 1,
          title: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
          description:
            '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
          personaDescription:
            'Old shirt with papers in hand, using calculator with missing buttons',
        },
        {
          level: 10,
          requiredCharacterLevel: 10,
          title: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
          description: '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ',
          personaDescription:
            'Digital accounting notebook, formal attire, starting to use modern devices',
        },
        {
          level: 35,
          requiredCharacterLevel: 35,
          title: '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™',
          description:
            '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏©‡∏µ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ',
          personaDescription:
            'Neat shirt with tablet, digital calculator attached',
        },
        {
          level: 60,
          requiredCharacterLevel: 60,
          title: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
          description:
            '‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
          personaDescription:
            'Agile attire with AR analysis system surrounding',
        },
        {
          level: 80,
          requiredCharacterLevel: 80,
          title: '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
          description: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
          personaDescription:
            'Elegant suit with holo-data financial analysis floating in air',
        },
        {
          level: 99,
          requiredCharacterLevel: 99,
          title: '‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
          description:
            '‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
          personaDescription:
            'Holographic accounting floating around, hand-controlled, expert aura',
        },
      ],
    },
    {
      name: '‡∏ô‡∏±‡∏Å‡∏Ç‡∏≤‡∏¢',
      description:
        '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢',
      imageUrl: `https://${bucket}.${region}.digitaloceanspaces.com/sales.png`,
      jobLevels: [
        {
          level: 1,
          requiredCharacterLevel: 1,
          title: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢',
          personaDescription:
            'Faded polo shirt with crumpled proposals, worried face',
        },
        {
          level: 10,
          requiredCharacterLevel: 10,
          title: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢',
          description:
            '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤',
          personaDescription:
            'Wearing shirt + tie, holding tablet showing products',
        },
        {
          level: 35,
          requiredCharacterLevel: 35,
          title: '‡∏ô‡∏±‡∏Å‡∏Ç‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
          description:
            '‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏á ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πà‡∏á ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ',
          personaDescription:
            'Holding smart device with graphs, presenting confidently',
        },
        {
          level: 60,
          requiredCharacterLevel: 60,
          title: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢',
          description: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°',
          personaDescription:
            'Modern business suit with AR goggles, floating product images',
        },
        {
          level: 80,
          requiredCharacterLevel: 80,
          title: '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢',
          description:
            '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
          personaDescription:
            'Luxury suit with team leader badge, selling through smart charts',
        },
        {
          level: 99,
          requiredCharacterLevel: 99,
          title: '‡∏£‡∏≤‡∏ä‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢',
          description:
            '‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏¥‡∏Å‡πÇ‡∏â‡∏°‡∏ß‡∏á‡∏Å‡∏≤‡∏£',
          personaDescription:
            'Surrounded by hologram customers and multi-dimensional products, leadership aura',
        },
      ],
    },
    {
      name: '‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå',
      description:
        '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏á‡∏≤‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏∞ ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡πÜ',
      imageUrl: `https://${bucket}.${region}.digitaloceanspaces.com/designer.png`,
      jobLevels: [
        {
          level: 1,
          requiredCharacterLevel: 1,
          title: '‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö',
          personaDescription: 'Wrinkled t-shirt with ink-stained sketchbook',
        },
        {
          level: 10,
          requiredCharacterLevel: 10,
          title: '‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö',
          description: '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ ‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á',
          personaDescription:
            'Slightly stylish attire, holding iPad with stylus',
        },
        {
          level: 35,
          requiredCharacterLevel: 35,
          title: '‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
          description:
            '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô',
          personaDescription: 'Cool jacket holding tablet with UI design work',
        },
        {
          level: 60,
          requiredCharacterLevel: 60,
          title: '‡∏Ñ‡∏£‡∏µ‡πÄ‡∏≠‡∏ó‡∏µ‡∏ü‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå',
          description: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡∏ô‡∏≥‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô',
          personaDescription:
            'AR glasses with UI screens placed around, showing 3D work',
        },
        {
          level: 80,
          requiredCharacterLevel: 80,
          title: '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏µ‡πÄ‡∏≠‡∏ó‡∏µ‡∏ü',
          description:
            '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡∏°‡∏Ñ‡∏£‡∏µ‡πÄ‡∏≠‡∏ó‡∏µ‡∏ü ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á',
          personaDescription:
            'Custom designer outfit with rotating presentation screens in motion',
        },
        {
          level: 99,
          requiredCharacterLevel: 99,
          title: '‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö',
          description:
            '‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏á‡∏Å‡∏≤‡∏£',
          personaDescription:
            'Legendary designer with work floating as installation art, iconic pose',
        },
      ],
    },
    {
      name: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå',
      description:
        '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ',
      imageUrl: `https://${bucket}.${region}.digitaloceanspaces.com/programmer.png`,
      jobLevels: [
        {
          level: 1,
          requiredCharacterLevel: 1,
          title: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏î‡πâ',
          personaDescription:
            'Worn hoodie holding old laptop, screen showing errors',
        },
        {
          level: 10,
          requiredCharacterLevel: 10,
          title: '‡∏à‡∏π‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå',
          description: '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤ ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ',
          personaDescription: 'Wearing new hoodie, coding on mid-spec laptop',
        },
        {
          level: 35,
          requiredCharacterLevel: 35,
          title: '‡∏ã‡∏µ‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå',
          description:
            '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
          personaDescription:
            'Techwear shirt with laptop and slight hologram tools',
        },
        {
          level: 60,
          requiredCharacterLevel: 60,
          title: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç',
          description:
            '‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ',
          personaDescription:
            'Multiple holographic screens overlapping, floating keyboard',
        },
        {
          level: 80,
          requiredCharacterLevel: 80,
          title: '‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏¥‡∏Å‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå',
          description:
            '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤',
          personaDescription:
            'Custom developer suit with hacker pro style code',
        },
        {
          level: 99,
          requiredCharacterLevel: 99,
          title: '‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î',
          description:
            '‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏•‡∏Å',
          personaDescription:
            'Living in cybernetic code world with data streams flowing around',
        },
      ],
    },
    {
      name: '‡∏ä‡πà‡∏≤‡∏á',
      description:
        '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° ‡πÅ‡∏•‡∏∞‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£',
      imageUrl: `https://${bucket}.${region}.digitaloceanspaces.com/mechanic.png`,
      jobLevels: [
        {
          level: 1,
          requiredCharacterLevel: 1,
          title: '‡∏ä‡πà‡∏≤‡∏á‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ',
          personaDescription:
            'Torn/stained mechanic suit holding bent screwdriver, unsure posture',
        },
        {
          level: 10,
          requiredCharacterLevel: 10,
          title: '‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          description:
            '‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ',
          personaDescription:
            'Cleaner mechanic suit, portable tools, eager posture',
        },
        {
          level: 35,
          requiredCharacterLevel: 35,
          title: '‡∏ä‡πà‡∏≤‡∏á‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç‡∏Å‡∏≤‡∏£',
          description: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡πÑ‡∏î‡πâ',
          personaDescription:
            'Wearing utility shirt with toolbelt using laser measuring',
        },
        {
          level: 60,
          requiredCharacterLevel: 60,
          title: '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡πà‡∏≤‡∏á',
          description: '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÜ',
          personaDescription:
            'Mechanical arm/AR engineering glasses, repair drone floating nearby',
        },
        {
          level: 80,
          requiredCharacterLevel: 80,
          title: '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™',
          description:
            '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å',
          personaDescription:
            'Half-body exosuit with part control system, high-level mechanic pose',
        },
        {
          level: 99,
          requiredCharacterLevel: 99,
          title: '‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°',
          description:
            '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ß‡∏±‡∏ï‡∏¥‡∏ß‡∏á‡∏Å‡∏≤‡∏£ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏•‡πâ‡∏≥‡∏™‡∏°‡∏±‡∏¢',
          personaDescription:
            'Futuristic mechanic armor with AI mechanical arms, energy flowing around, elegant posture',
        },
      ],
    },
  ]

  const createdJobClasses = []

  for (const jobClass of jobClassData) {
    const createdJobClass = await prisma.jobClass.create({
      data: {
        name: jobClass.name,
        description: jobClass.description,
        imageUrl: jobClass.imageUrl,
      },
    })

    // Create JobLevel for each JobClass with personaDescription and personaTraits
    for (const level of jobClass.jobLevels) {
      await prisma.jobLevel.create({
        data: {
          level: level.level,
          requiredCharacterLevel: level.requiredCharacterLevel,
          title: level.title,
          description: level.description,
          personaDescription: level.personaDescription,
          jobClassId: createdJobClass.id,
        },
      })
    }

    createdJobClasses.push(createdJobClass)
  }

  return createdJobClasses
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á User ==========
async function createUsers() {
  const users = []

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á User 10 ‡∏Ñ‡∏ô
  for (let i = 0; i < 10; i++) {
    const gender = faker.person.sex() as 'male' | 'female'
    const firstName = faker.person.firstName(gender)
    const lastName = faker.person.lastName(gender)
    const username = faker.internet
      .userName({ firstName, lastName })
      .toLowerCase()

    const user = await prisma.user.create({
      data: {
        email: faker.internet.email({ firstName, lastName }),
        username: username,
        password: faker.internet.password({ length: 10 }),
        name: `${firstName} ${lastName}`,
        avatar: faker.image.avatar(),
        bio: faker.person.bio(),
        // level: faker.number.int({ min: 1, max: 50 }),
        // xp: faker.number.int({ min: 100, max: 5000 }),
      },
    })

    users.push(user)
  }

  return users
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Character ==========

function generatePortraits(level: number): {
  portraits: Record<string, string>
  currentUrl: string
} {
  const baseUrl = `https://${bucket}.${region}.digitaloceanspaces.com`

  const milestones = [1, 10, 35, 60, 80, 99]
  const portraits: Record<string, string> = {}

  for (const milestone of milestones) {
    portraits[milestone.toString()] = `${baseUrl}/${milestone}.png`
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î currentUrl ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û milestone ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà level ‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô
  const unlockedMilestone = [...milestones]
    .reverse()
    .find((milestone) => level >= milestone)

  const currentUrl =
    unlockedMilestone !== undefined
      ? portraits[unlockedMilestone.toString()]
      : portraits['1']

  return { portraits, currentUrl }
}

export async function createCharacters(users: any[], jobClasses: any[]) {
  const characters = []

  for (const user of users) {
    const jobClass = faker.helpers.arrayElement(jobClasses)

    const jobLevels = await prisma.jobLevel.findMany({
      where: { jobClassId: jobClass.id },
      orderBy: { level: 'asc' },
    })

    let level = faker.number.int({ min: 1, max: 50 })

    let selectedJobLevel = jobLevels[0]
    for (const jobLevel of jobLevels) {
      if (level >= jobLevel.requiredCharacterLevel) {
        selectedJobLevel = jobLevel
      } else {
        break
      }
    }

    const baseStats = 10
    let statAGI = baseStats
    let statSTR = baseStats
    let statDEX = baseStats
    let statVIT = baseStats
    let statINT = baseStats

    let personaTraits = ''

    switch (jobClass.name) {
      case '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î':
        statAGI += faker.number.int({ min: 5, max: 15 })
        statINT += faker.number.int({ min: 5, max: 10 })
        personaTraits =
          'bright confident eyes, styled hair, charismatic smile, and energetic posture'
        break
      case '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ':
        statINT += faker.number.int({ min: 10, max: 20 })
        statDEX += faker.number.int({ min: 3, max: 8 })
        personaTraits =
          'focused eyes behind glasses, neat hair, serious expression, and organized appearance'
        break
      case '‡∏ô‡∏±‡∏Å‡∏Ç‡∏≤‡∏¢':
        statAGI += faker.number.int({ min: 8, max: 15 })
        statSTR += faker.number.int({ min: 3, max: 8 })
        personaTraits =
          'friendly eyes, approachable smile, neat appearance, and persuasive charm'
        break
      case '‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå':
        statDEX += faker.number.int({ min: 10, max: 20 })
        statINT += faker.number.int({ min: 5, max: 10 })
        personaTraits =
          'creative eyes, artistic hairstyle, unique fashion sense, and innovative aura'
        break
      case '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå':
        statINT += faker.number.int({ min: 15, max: 25 })
        statVIT += faker.number.int({ min: 3, max: 8 })
        personaTraits =
          'intelligent eyes, casual hair, focused expression, and tech-savvy appearance'
        break
      case '‡∏ä‡πà‡∏≤‡∏á':
        statSTR += faker.number.int({ min: 10, max: 20 })
        statDEX += faker.number.int({ min: 5, max: 15 })
        personaTraits =
          'practical eyes, short hair, determined face, and strong build'
        break
    }

    const { portraits, currentUrl } = generatePortraits(level)

    const character = await prisma.character.create({
      data: {
        name: `${user.name} (${jobClass.name})`,
        level: level,
        currentXP: faker.number.int({ min: 0, max: 900 }),
        nextLevelXP: 1000,
        totalXP: level * 1000 + faker.number.int({ min: 0, max: 900 }),
        statPoints: faker.number.int({ min: 0, max: 10 }),
        statAGI,
        statSTR,
        statDEX,
        statVIT,
        statINT,
        currentPortraitUrl: currentUrl,
        personaTraits,
        userId: user.id,
        jobClassId: jobClass.id,
        jobLevelId: selectedJobLevel.id,
        generatedPortraits: portraits,
      },
    })

    characters.push(character)
  }

  return characters
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Achievement ==========
async function createAchievements() {
  const achievementData = [
    {
      name: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
      description: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å',
      icon: 'üåü',
    },
    { name: '‡∏ô‡∏±‡∏Å‡∏™‡∏π‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', description: '‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Ñ‡∏£‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', icon: 'üî•' },
    {
      name: '‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ',
      description: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô INT ‡πÄ‡∏ï‡πá‡∏° 5 ‡∏î‡∏≤‡∏ß‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏ß‡∏™',
      icon: 'üìö',
    },
    {
      name: '‡∏ô‡∏±‡∏Å‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô',
      description: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      icon: 'üìù',
    },
    {
      name: '‡∏£‡∏≤‡∏ä‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢',
      description: '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤ 200%',
      icon: 'üëë',
    },
    {
      name: '‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö',
      description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡∏¢‡πà‡∏≠‡∏á',
      icon: '‚ú®',
    },
    {
      name: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏ä‡∏¥‡∏ï',
      description: '‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      icon: 'üíª',
    },
    {
      name: '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡∏∑‡∏≠‡∏ó‡∏≠‡∏á',
      description: '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
      icon: 'üí∞',
    },
    {
      name: '‡∏ä‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç',
      description: '‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      icon: 'üîß',
    },
    {
      name: '‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å',
      description: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      icon: 'üöÄ',
    },
  ]

  const achievements = []

  for (const achievement of achievementData) {
    const created = await prisma.achievement.create({
      data: achievement,
    })

    achievements.push(created)
  }

  return achievements
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏°‡∏≠‡∏ö Achievement ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Character ==========
async function assignAchievements(
  characters: any[],
  achievements: any[],
  users: any[]
) {
  const characterAchievements = []

  for (const character of characters) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Achievement ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≠‡∏ö‡πÉ‡∏´‡πâ (1-3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    const numAchievements = faker.number.int({ min: 1, max: 3 })

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Achievement
    const selectedAchievements = faker.helpers.arrayElements(
      achievements,
      numAchievements
    )

    for (const achievement of selectedAchievements) {
      const earnedOn = faker.date.past({ years: 1 })

      const charAchievement = await prisma.characterAchievement.create({
        data: {
          characterId: character.id,
          achievementId: achievement.id,
          userId: character.userId,
          earnedOn,
        },
      })

      characterAchievements.push(charAchievement)
    }
  }

  return characterAchievements
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Party ==========
// async function createParties(users: any[]) {
//   // ‡∏™‡∏£‡πâ‡∏≤‡∏á Party 3 ‡∏ó‡∏µ‡∏°
//   const partyData = [
//     {
//       name: '‡∏ó‡∏µ‡∏°‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà',
//       description: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ü‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏•‡∏¥‡∏Å‡πÇ‡∏â‡∏°‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
//       imageUrl: 'https://source.unsplash.com/featured/?team,marketing',
//     },
//     {
//       name: '‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå',
//       description: '‡∏ó‡∏µ‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
//       imageUrl: 'https://source.unsplash.com/featured/?team,programming',
//     },
//     {
//       name: '‡∏ó‡∏µ‡∏°‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå',
//       description: '‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ',
//       imageUrl: 'https://source.unsplash.com/featured/?team,design',
//     },
//   ]

//   const parties = []

//   for (const partyInfo of partyData) {
//     const party = await prisma.party.create({
//       data: partyInfo,
//     })

//     // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 3-4 ‡∏Ñ‡∏ô
//     const partySize = faker.number.int({ min: 3, max: 4 })
//     const partyMembers = faker.helpers.arrayElements(users, partySize)

//     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°
//     for (let i = 0; i < partyMembers.length; i++) {
//       await prisma.partyMember.create({
//         data: {
//           partyId: party.id,
//           userId: partyMembers[i].id,
//           role: i === 0 ? 'leader' : 'member',
//         },
//       })
//     }

//     parties.push(party)
//   }

//   return parties
// }

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Quest ==========
async function createQuests() {
  const questData = [
    // ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
    {
      title: '‡∏ï‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      description: '‡∏ï‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ 5 ‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      type: 'daily',
      difficultyLevel: 1,
      xpReward: 100,
      imageUrl: 'https://source.unsplash.com/featured/?email',
      baseTokenReward: 10,
    },
    {
      title: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      description: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      type: 'daily',
      difficultyLevel: 2,
      xpReward: 150,
      imageUrl: 'https://source.unsplash.com/featured/?report',
      baseTokenReward: 15,
    },
    {
      title: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
      description: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      type: 'daily',
      difficultyLevel: 1,
      xpReward: 120,
      imageUrl: 'https://source.unsplash.com/featured/?update',
      baseTokenReward: 12,
    },
    {
      title: '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°',
      description: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      type: 'daily',
      difficultyLevel: 1,
      xpReward: 100,
      imageUrl: 'https://source.unsplash.com/featured/?meeting',
      baseTokenReward: 10,
    },

    // ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    {
      title: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
      description: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÉ‡∏´‡∏°‡πà',
      type: 'weekly',
      difficultyLevel: 3,
      xpReward: 300,
      imageUrl: 'https://source.unsplash.com/featured/?marketing,plan',
      baseTokenReward: 30,
    },
    {
      title: '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà',
      description: '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô',
      type: 'weekly',
      difficultyLevel: 4,
      xpReward: 400,
      imageUrl: 'https://source.unsplash.com/featured/?coding',
      baseTokenReward: 40,
    },
    {
      title: '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ',
      description: '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà',
      type: 'weekly',
      difficultyLevel: 3,
      xpReward: 350,
      imageUrl: 'https://source.unsplash.com/featured/?logo,design',
      baseTokenReward: 35,
    },
    {
      title: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà',
      type: 'weekly',
      difficultyLevel: 3,
      xpReward: 350,
      imageUrl: 'https://source.unsplash.com/featured/?data,analysis',
      baseTokenReward: 35,
    },

    // ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©
    {
      title: '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÉ‡∏´‡∏ç‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ',
      description: '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÉ‡∏´‡∏ç‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ',
      type: 'special',
      difficultyLevel: 5,
      xpReward: 1000,
      imageUrl: 'https://source.unsplash.com/featured/?campaign',
      baseTokenReward: 100,
      maxTokenReward: 200,
    },
    {
      title: '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
      description: '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      type: 'special',
      difficultyLevel: 5,
      xpReward: 1200,
      imageUrl: 'https://source.unsplash.com/featured/?backend,system',
      baseTokenReward: 120,
      maxTokenReward: 240,
    },
    {
      title: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà',
      description: '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      type: 'special',
      difficultyLevel: 5,
      xpReward: 1100,
      imageUrl: 'https://source.unsplash.com/featured/?brand,identity',
      baseTokenReward: 110,
      maxTokenReward: 220,
    },
    {
      title: '‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå',
      description: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà',
      type: 'special',
      difficultyLevel: 5,
      xpReward: 1000,
      imageUrl: 'https://source.unsplash.com/featured/?product,launch',
      baseTokenReward: 100,
      maxTokenReward: 200,
    },
  ]

  const quests = []

  for (const quest of questData) {
    const created = await prisma.quest.create({
      data: quest,
    })

    quests.push(created)
  }

  return quests
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ Quest ==========
async function assignQuests(characters: any[], quests: any[], users: any[]) {
  const assignedQuests = []

  for (const character of characters) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Quest ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ (1-3 ‡πÄ‡∏Ñ‡∏ß‡∏™)
    const numQuests = faker.number.int({ min: 1, max: 3 })

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Quest
    const selectedQuests = faker.helpers.arrayElements(quests, numQuests)

    for (const quest of selectedQuests) {
      const assignedAt = faker.date.recent({ days: 7 })
      let expiresAt = null

      if (quest.type === 'daily') {
        expiresAt = new Date(assignedAt)
        expiresAt.setDate(assignedAt.getDate() + 1)
      } else if (quest.type === 'weekly') {
        expiresAt = new Date(assignedAt)
        expiresAt.setDate(assignedAt.getDate() + 7)
      } else if (quest.type === 'special') {
        expiresAt = new Date(assignedAt)
        expiresAt.setDate(assignedAt.getDate() + 30)
      }

      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô active ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
      const statusOptions = ['active', 'completed', 'failed']
      const weightedStatus = [
        ...Array(5).fill('active'),
        'completed',
        'completed',
        'failed',
      ]
      const status = faker.helpers.arrayElement(weightedStatus) as
        | 'active'
        | 'completed'
        | 'failed'

      const assigned = await prisma.assignedQuest.create({
        data: {
          questId: quest.id,
          characterId: character.id,
          userId: character.userId,
          assignedAt,
          expiresAt,
          status,
        },
      })

      assignedQuests.push(assigned)
    }
  }

  return assignedQuests
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô submit Quest ==========
async function submitQuests(characters: any[], quests: any[]) {
  const questSubmissions = []

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• assigned quests ‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'completed'
  const completedAssignments = await prisma.assignedQuest.findMany({
    where: { status: 'completed' },
    include: { quest: true, character: true },
  })

  for (const assignment of completedAssignments) {
    const mediaTypes = Object.values(EnumMediaType)
    const mediaType = faker.helpers.arrayElement(mediaTypes)

    let mediaUrl = null
    if (mediaType === 'image') {
      mediaUrl = `https://source.unsplash.com/featured/?work,${assignment.quest.type}`
    } else if (mediaType === 'video') {
      mediaUrl = 'https://example.com/video.mp4'
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á QuestSubmission
    const questSubmission = await prisma.questSubmission.create({
      data: {
        mediaType,
        mediaUrl,
        description: faker.lorem.paragraph({ min: 2, max: 4 }),
        // ‡πÉ‡∏ô MySQL, Prisma ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á array ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        tags: [
          assignment.quest.title,
          assignment.quest.type,
          faker.word.adjective(),
        ],
        ratingAGI: faker.number.int({ min: 1, max: 5 }),
        ratingSTR: faker.number.int({ min: 1, max: 5 }),
        ratingDEX: faker.number.int({ min: 1, max: 5 }),
        ratingVIT: faker.number.int({ min: 1, max: 5 }),
        ratingINT: faker.number.int({ min: 1, max: 5 }),
        xpEarned: assignment.quest.xpReward,
        submittedAt: faker.date.recent({ days: 14 }),
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö character
        character: {
          connect: { id: assignment.characterId },
        },
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö quest
        quest: {
          connect: { id: assignment.questId },
        },
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö assignedQuest
        assignedQuest: {
          connect: { id: assignment.id },
        },
      },
    })

    questSubmissions.push(questSubmission)
  }

  return questSubmissions
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á LevelHistory ==========
async function createLevelHistories(characters: any[]) {
  const levelHistories = []

  for (const character of characters) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û 1-3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const numHistories = faker.number.int({ min: 1, max: 3 })

    for (let i = 0; i < numHistories; i++) {
      const levelFrom = character.level - (i + 1)
      if (levelFrom <= 0) continue // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0

      const levelHistory = await prisma.levelHistory.create({
        data: {
          characterId: character.id,
          levelFrom,
          levelTo: levelFrom + 1,
          agiGained: faker.number.int({ min: 1, max: 3 }),
          strGained: faker.number.int({ min: 1, max: 3 }),
          dexGained: faker.number.int({ min: 1, max: 3 }),
          vitGained: faker.number.int({ min: 1, max: 3 }),
          intGained: faker.number.int({ min: 1, max: 3 }),
          reasoning: faker.lorem.paragraph({ min: 1, max: 3 }),
          recordedAt: faker.date.past({ years: 1, refDate: new Date() }),
        },
      })

      levelHistories.push(levelHistory)
    }
  }

  return levelHistories
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á FeedItem ==========
function shuffleArray<T>(array: T[]): T[] {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[array[i], array[j]] = [array[j], array[i]]
  }
  return array
}
export async function createFeedItems(
  users: any[],
  questSubmissions: any[],
  levelHistories: any[],
  characterAchievements: any[]
) {
  const feedItems = []

  // ========== 1. FeedItem ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á QuestSubmission ==========
  for (const submission of questSubmissions) {
    const user = await prisma.user.findUnique({
      where: { id: await getUserIdFromCharacterId(submission.characterId) },
    })

    if (!user) continue

    const feedItem = await prisma.feedItem.create({
      data: {
        content: `${user.name} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™ "${
          (await prisma.quest.findUnique({ where: { id: submission.questId } }))
            ?.title
        }" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${submission.xpEarned} XP!`,
        type: 'quest_completion',
        mediaType: submission.mediaType,
        mediaUrl: submission.mediaUrl,
        userId: user.id,
        questSubmissionId: submission.id,
      },
    })

    feedItems.push(feedItem)
  }

  // ========== 2. FeedItem ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û ==========
  for (const levelHistory of levelHistories) {
    const user = await prisma.user.findUnique({
      where: { id: await getUserIdFromCharacterId(levelHistory.characterId) },
    })

    if (!user) continue

    const character = await prisma.character.findUnique({
      where: { id: levelHistory.characterId },
      include: { jobClass: true },
    })

    if (!character) continue

    const feedItem = await prisma.feedItem.create({
      data: {
        content: `üéâ ${user.name} (${character.jobClass.name}) ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û‡∏à‡∏≤‡∏Å Lv.${levelHistory.levelFrom} ‡πÄ‡∏õ‡πá‡∏ô Lv.${levelHistory.levelTo}! üí™ STR +${levelHistory.strGained} üß† INT +${levelHistory.intGained} üèÉ AGI +${levelHistory.agiGained} üéØ DEX +${levelHistory.dexGained} ‚ù§Ô∏è VIT +${levelHistory.vitGained}`,
        type: 'level_up',
        mediaType: 'text',
        userId: user.id,
        levelHistoryId: levelHistory.id,
      },
    })

    feedItems.push(feedItem)
  }

  // ========== 3. FeedItem ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Achievement ==========
  for (const charAchievement of characterAchievements) {
    const achievement = await prisma.achievement.findUnique({
      where: { id: charAchievement.achievementId },
    })

    if (!achievement) continue

    const feedItem = await prisma.feedItem.create({
      data: {
        content: `${achievement.icon} ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ${
          (
            await prisma.user.findUnique({
              where: { id: charAchievement.userId },
            })
          )?.name
        } ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à "${achievement.name}" - ${achievement.description}`,
        type: 'achievement',
        mediaType: 'text',
        userId: charAchievement.userId,
        achievementId: charAchievement.id,
      },
    })

    feedItems.push(feedItem)
  }

  // ========== 4. FeedItem ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ==========
  const postTypes = [
    { type: 'post', content: () => faker.lorem.paragraph({ min: 1, max: 4 }) },
    {
      type: 'post',
      content: () =>
        `‡∏Ç‡∏≠‡πÄ‡πÄ‡∏ä‡∏£‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ: ${faker.lorem.paragraph({ min: 2, max: 5 })}`,
    },
    {
      type: 'post',
      content: () =>
        `‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${faker.lorem.paragraph({ min: 1, max: 3 })}`,
    },
    {
      type: 'post',
      content: () =>
        `"${faker.lorem.sentence({
          min: 5,
          max: 10,
        })}" - ${faker.person.fullName()}`,
    },
    {
      type: 'post',
      content: () =>
        `‡∏ä‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å: "${faker.lorem.sentence({ min: 5, max: 10 })}"`,
    },
    {
      type: 'post',
      content: () =>
        `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å! ${faker.lorem.sentence({ min: 3, max: 8 })}`,
    },
    {
      type: 'post',
      content: () =>
        `‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏´‡∏°‡πà: ${faker.lorem.paragraph({ min: 1, max: 2 })}`,
    },
  ]

  for (let i = 0; i < 10; i++) {
    const user = faker.helpers.arrayElement(users)
    const postType = faker.helpers.arrayElement(postTypes)
    const useImage = faker.datatype.boolean({ probability: 0.3 })

    const feedItem = await prisma.feedItem.create({
      data: {
        content: postType.content(),
        type: postType.type,
        mediaType: useImage ? 'image' : 'text',
        mediaUrl: useImage
          ? `https://source.unsplash.com/featured/?${faker.word.adjective()},${faker.word.noun()}`
          : null,
        userId: user.id,
      },
    })

    feedItems.push(feedItem)
  }

  // ‡∏Ñ‡∏•‡∏∞‡∏•‡∏≥‡∏î‡∏±‡∏ö feedItems ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
  return shuffleArray(feedItems)
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Story ==========
async function createStories(users: any[]) {
  const stories = []

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Story ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ User
  for (const user of users) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á 0-2 stories ‡∏ï‡πà‡∏≠ user
    const numStories = faker.number.int({ min: 0, max: 2 })

    for (let i = 0; i < numStories; i++) {
      const mediaTypes = Object.values(EnumMediaType)
      const mediaType = faker.helpers.arrayElement(mediaTypes)

      let mediaUrl = null
      let text = null

      if (mediaType === 'text') {
        text = faker.lorem.paragraph({ min: 1, max: 2 })
      } else if (mediaType === 'image') {
        mediaUrl = `https://source.unsplash.com/featured/?story,${faker.word.adjective()}`
      } else if (mediaType === 'video') {
        mediaUrl = 'https://example.com/story-video.mp4'
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á expiresAt (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
      const createdAt = faker.date.recent({ days: 1 })
      const expiresAt = new Date(createdAt)
      expiresAt.setHours(expiresAt.getHours() + 24)

      const story = await prisma.story.create({
        data: {
          content: faker.lorem.sentence({ min: 3, max: 8 }),
          type: mediaType,
          mediaUrl,
          text,
          expiresAt,
          createdAt,
          userId: user.id,
        },
      })

      stories.push(story)
    }
  }

  return stories
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Like ==========
async function createLikes(users: any[], feedItems: any[]) {
  const likes = []

  for (const feedItem of feedItems) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Like (0-8 likes)
    const numLikes = faker.number.int({ min: 0, max: 8 })

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å user ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏î Like (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° user ‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå)
    const otherUsers = users.filter((user) => user.id !== feedItem.userId)
    const likers = faker.helpers.arrayElements(
      otherUsers,
      Math.min(numLikes, otherUsers.length)
    )

    for (const liker of likers) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingLike = await prisma.like.findFirst({
        where: {
          feedItemId: feedItem.id,
          userId: liker.id,
        },
      })

      if (!existingLike) {
        const like = await prisma.like.create({
          data: {
            feedItemId: feedItem.id,
            userId: liker.id,
          },
        })

        likes.push(like)
      }
    }
  }

  return likes
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Comment ==========
async function createComments(users: any[], feedItems: any[]) {
  const comments = []

  for (const feedItem of feedItems) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Comment (0-5 comments)
    const numComments = faker.number.int({ min: 0, max: 5 })

    for (let i = 0; i < numComments; i++) {
      // ‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Å‡πá‡πÑ‡∏î‡πâ)
      const commenter = faker.helpers.arrayElement(users)

      const comment = await prisma.comment.create({
        data: {
          content: faker.lorem.sentences({ min: 1, max: 3 }),
          feedItemId: feedItem.id,
          userId: commenter.id,
        },
      })

      comments.push(comment)
    }
  }

  return comments
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ReplyComment ==========
async function createReplyComments(users: any[], comments: any[]) {
  const replyComments = []

  for (const comment of comments) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (30% ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö)
    const hasReply = faker.datatype.boolean({ probability: 0.3 })

    if (hasReply) {
      // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (1-2 replies)
      const numReplies = faker.number.int({ min: 1, max: 2 })

      for (let i = 0; i < numReplies; i++) {
        // ‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        const replier = faker.helpers.arrayElement(users)

        const replyComment = await prisma.replyComment.create({
          data: {
            content: faker.lorem.sentences({ min: 1, max: 2 }),
            commentId: comment.id,
            userId: replier.id,
          },
        })

        replyComments.push(replyComment)
      }
    }
  }

  return replyComments
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á StoryView ==========
async function createStoryViews(users: any[], stories: any[]) {
  const storyViews = []

  for (const story of stories) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏° (1-8 views)
    const numViews = faker.number.int({ min: 1, max: 8 })

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å user ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π Story (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° user ‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå)
    const otherUsers = users.filter((user) => user.id !== story.userId)
    const viewers = faker.helpers.arrayElements(
      otherUsers,
      Math.min(numViews, otherUsers.length)
    )

    for (const viewer of viewers) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ StoryView ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingView = await prisma.storyView.findFirst({
        where: {
          storyId: story.id,
          userId: viewer.id,
        },
      })

      if (!existingView) {
        const storyView = await prisma.storyView.create({
          data: {
            storyId: story.id,
            userId: viewer.id,
          },
        })

        storyViews.push(storyView)
      }
    }
  }

  return storyViews
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á UserToken ==========
async function createUserTokens(users: any[]) {
  const userTokens = []

  for (const user of users) {
    const currentTokens = faker.number.int({ min: 50, max: 2000 })
    const totalEarned = currentTokens + faker.number.int({ min: 0, max: 1000 })

    const userToken = await prisma.userToken.create({
      data: {
        userId: user.id,
        currentTokens,
        totalEarnedTokens: totalEarned,
        totalSpentTokens: totalEarned - currentTokens,
      },
    })

    userTokens.push(userToken)
  }

  return userTokens
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ==========
async function getUserIdFromCharacterId(characterId: number): Promise<number> {
  const character = await prisma.character.findUnique({
    where: { id: characterId },
    select: { userId: true },
  })

  return character?.userId || 0
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á TokenMultiplierEvent ==========
async function createTokenMultiplierEvents() {
  const events = []

  const eventData = [
    {
      name: 'Weekend Token Boost',
      description: '‡∏£‡∏±‡∏ö token ‡πÄ‡∏û‡∏¥‡πà‡∏° 50% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      multiplier: 1.5,
      questTypes: ['daily', 'weekly', 'special'],
      startDate: new Date(),
      endDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 ‡∏ß‡∏±‡∏ô
      isActive: true,
    },
    {
      name: 'Special Quest Double Token',
      description: '‡∏£‡∏±‡∏ö token ‡πÄ‡∏õ‡πá‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
      multiplier: 2.0,
      questTypes: ['special'],
      startDate: new Date(),
      endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 ‡∏ß‡∏±‡∏ô
      isActive: true,
    },
    {
      name: 'New Player Bonus',
      description: '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏£‡∏±‡∏ö token ‡πÄ‡∏û‡∏¥‡πà‡∏° 30% ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™',
      multiplier: 1.3,
      questTypes: ['daily', 'weekly'],
      startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // ‡πÄ‡∏£‡∏¥‡πà‡∏° 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // ‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏±‡∏ô
      isActive: true,
    },
  ]

  for (const data of eventData) {
    const event = await prisma.tokenMultiplierEvent.create({
      data: data,
    })
    events.push(event)
  }

  return events
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á TokenShopItem ==========
async function createTokenShopItems() {
  const items = []

  const shopItems = [
    {
      name: 'XP Boost 50%',
      description: '‡πÄ‡∏û‡∏¥‡πà‡∏° XP ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 50% ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      category: 'boost',
      itemType: 'xp_boost' as const,
      price: 100,
      imageUrl: 'https://source.unsplash.com/featured/?boost,experience',
      metadata: { duration: 86400, multiplier: 1.5 },
      stock: null, // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
      isActive: true,
      minLevel: 5,
    },
    {
      name: 'Token Boost 2x',
      description: '‡∏£‡∏±‡∏ö token ‡πÄ‡∏õ‡πá‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ß‡∏±‡∏ô',
      category: 'boost',
      itemType: 'token_boost' as const,
      price: 300,
      imageUrl: 'https://source.unsplash.com/featured/?coins,gold',
      metadata: { duration: 259200, multiplier: 2.0 },
      stock: null,
      isActive: true,
      minLevel: 10,
    },
    {
      name: 'Stat Reset Scroll',
      description: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ stat ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà',
      category: 'utility',
      itemType: 'stat_reset' as const,
      price: 500,
      imageUrl: 'https://source.unsplash.com/featured/?scroll,reset',
      metadata: {},
      stock: null,
      isActive: true,
      minLevel: 20,
    },
    {
      name: 'Portrait Pack - Legendary',
      description: '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö Legendary',
      category: 'cosmetic',
      itemType: 'portrait_unlock' as const,
      price: 1000,
      imageUrl: 'https://source.unsplash.com/featured/?portrait,legendary',
      metadata: { portraitIds: ['legendary_1', 'legendary_2', 'legendary_3'] },
      stock: 50,
      isActive: true,
      minLevel: 50,
    },
    {
      name: 'Quest Skip Ticket',
      description: '‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
      category: 'utility',
      itemType: 'quest_skip' as const,
      price: 150,
      imageUrl: 'https://source.unsplash.com/featured/?ticket,skip',
      metadata: {},
      stock: null,
      isActive: true,
      maxPurchasePerUser: 5,
    },
  ]

  for (const item of shopItems) {
    const created = await prisma.tokenShopItem.create({
      data: item,
    })
    items.push(created)
  }

  return items
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QuestStreak ==========
async function createQuestStreaks(users: any[]) {
  const streaks = []

  for (const user of users) {
    const lastCompleted = faker.date.recent({
      days: faker.number.int({ min: 0, max: 2 }),
    })
    const currentStreak = faker.number.int({ min: 0, max: 30 })

    const streak = await prisma.questStreak.create({
      data: {
        userId: user.id,
        currentStreak: currentStreak,
        longestStreak: currentStreak + faker.number.int({ min: 0, max: 20 }),
        lastCompletedDate: lastCompleted,
        weeklyQuests: faker.number.int({ min: 0, max: 20 }),
        monthlyQuests: faker.number.int({ min: 0, max: 100 }),
      },
    })

    streaks.push(streak)
  }

  return streaks
}

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á TokenTransaction (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ token) ==========
async function createTokenTransactions(users: any[]) {
  const transactions = []

  for (const user of users) {
    const userToken = await prisma.userToken.findUnique({
      where: { userId: user.id },
    })

    if (!userToken) continue

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö/‡πÉ‡∏ä‡πâ token 3-10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const numTransactions = faker.number.int({ min: 3, max: 10 })
    let currentBalance = 0

    for (let i = 0; i < numTransactions; i++) {
      const isEarning = faker.datatype.boolean({ probability: 0.7 }) // 70% ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      const amount = isEarning
        ? faker.number.int({ min: 10, max: 200 })
        : -faker.number.int({ min: 50, max: 300 })

      const types = isEarning
        ? [
            'quest_completion',
            'streak_bonus',
            'level_up_reward',
            'achievement_reward',
          ]
        : ['shop_purchase']

      const type = faker.helpers.arrayElement(types) as any

      currentBalance += amount

      const transaction = await prisma.tokenTransaction.create({
        data: {
          userId: user.id,
          amount: amount,
          type: type,
          description: getTransactionDescription(type, amount),
          balanceBefore: currentBalance - amount,
          balanceAfter: currentBalance,
          createdAt: faker.date.recent({ days: 30 }),
        },
      })

      transactions.push(transaction)
    }
  }

  return transactions
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ transaction
function getTransactionDescription(type: string, amount: number): string {
  const descriptions: Record<string, string> = {
    quest_completion: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${Math.abs(amount)} tokens ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
    streak_bonus: `‡πÇ‡∏ö‡∏ô‡∏±‡∏™ ${Math.abs(amount)} tokens ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô`,
    level_up_reward: `‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ${Math.abs(amount)} tokens ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û`,
    achievement_reward: `‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ${Math.abs(amount)} tokens ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
    shop_purchase: `‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ ${Math.abs(amount)} tokens`,
  }

  return (
    descriptions[type] || `Token transaction: ${amount > 0 ? '+' : ''}${amount}`
  )
}

async function createRewardItems() {
  const rewardItems = [
    {
      name: 'Gift Card',
      subtitle: '$10 Value',
      description: '‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ $10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
      category: 'voucher',
      itemType: 'gift_card',
      icon: 'Gift',
      imageUrl: '/images/gift-card.png',
      color: 'from-orange-400 to-red-500',
      tokenCost: 500,
      gachaCost: 50,
      stock: null,
      isActive: true,
      rarity: 'common' as const,
      gachaProbability: 0.4,
      metadata: {
        value: 10,
        currency: 'USD',
      },
    },
    {
      name: 'Day Off',
      subtitle: 'Paid Leave',
      description: '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 1 ‡∏ß‡∏±‡∏ô (Paid Leave)',
      category: 'leave',
      itemType: 'day_off',
      icon: 'Sun',
      color: 'from-yellow-400 to-orange-500',
      tokenCost: 1000,
      gachaCost: 50,
      stock: null,
      isActive: true,
      rarity: 'uncommon' as const,
      gachaProbability: 0.3,
      metadata: {
        days: 1,
        type: 'paid',
      },
    },
    {
      name: 'Smartwatch',
      subtitle: 'Apple Watch',
      description: 'Apple Watch Series 9 ‡∏™‡∏µ‡∏î‡∏≥',
      category: 'gadget',
      itemType: 'smartwatch',
      icon: 'Watch',
      imageUrl: '/images/smartwatch.png',
      color: 'from-gray-700 to-gray-900',
      tokenCost: 20000,
      gachaCost: 50,
      stock: 5,
      isActive: true,
      rarity: 'rare' as const,
      gachaProbability: 0.05,
      metadata: {
        brand: 'Apple',
        model: 'Series 9',
        color: 'Black',
      },
    },
    {
      name: 'Electric Scooter',
      subtitle: 'E-Scooter',
      description: '‡∏™‡∏Å‡∏π‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ Xiaomi Mi Electric Scooter Pro 2',
      category: 'vehicle',
      itemType: 'scooter',
      icon: 'Zap',
      imageUrl: '/images/electric-scooter.png',
      color: 'from-purple-500 to-indigo-600',
      tokenCost: 15000,
      gachaCost: 50,
      stock: 3,
      isActive: true,
      rarity: 'epic' as const,
      gachaProbability: 0.02,
      metadata: {
        brand: 'Xiaomi',
        model: 'Mi Electric Scooter Pro 2',
        maxSpeed: 25,
        range: 45,
      },
    },
  ]

  const createdRewards = []

  for (const reward of rewardItems) {
    const created = await prisma.rewardItem.create({
      data: reward,
    })
    createdRewards.push(created)
  }

  return createdRewards
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Prisma Client
    await prisma.$disconnect()
  })
