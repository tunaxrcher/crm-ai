"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Input } from "@/components/ui/input";
import { useNotification } from "@/components/ui/notification-system";
import {
  AlertTriangle, Award, Calendar, ChevronLeft, ChevronRight, Clock,
  Crown, Flame, Globe, Lock, MessageCircle, Scroll, Shield,
  Skull, Swords, Target, Timer, Trophy, Users, Zap
} from "lucide-react";

// Mock special quests data
const mockSpecialQuests = [
  {
    id: "event-quest-1",
    title: "Quarter End Sprint",
    description: "A time-limited event where all sales teams compete to exceed targets in the final week of the quarter.",
    type: "time-limited-event",
    endDate: "Jun 30, 2025",
    timeRemaining: "5 days 3 hours",
    progress: 65,
    participants: 24,
    rewards: {
      xp: 2000,
      points: 1000,
      items: ["Legendary Sales Kit", "Time Extension (x3)", "Exclusive Avatar Frame: 'Quarter Champion'"]
    },
    difficulty: "hard",
    status: "active",
    requirements: "Level 5+",
    icon: <Flame className="h-10 w-10 text-red-400" />
  },
  {
    id: "raid-quest-1",
    title: "Enterprise Deal Raid",
    description: "Collaborate with a team of 5 to close a major enterprise deal with coordinated efforts across departments.",
    type: "raid",
    endDate: "Jun 20, 2025",
    timeRemaining: "3 days 12 hours",
    progress: 40,
    participants: 12,
    totalSlots: 25,
    rewards: {
      xp: 1500,
      points: 800,
      items: ["Enterprise Negotiator Badge", "Team XP Boost (30%)", "Rare Title: 'Deal Closer'"]
    },
    difficulty: "medium",
    status: "active",
    requirements: "Level 8+, 3+ team members",
    icon: <Swords className="h-10 w-10 text-blue-400" />
  },
  {
    id: "dungeon-quest-1",
    title: "Difficult Client Dungeon",
    description: "Navigate through a series of challenging interactions with a notoriously difficult client, requiring strategic responses and patience.",
    type: "dungeon",
    endDate: "Jul 5, 2025",
    timeRemaining: "10 days 6 hours",
    progress: 25,
    participants: 8,
    rewards: {
      xp: 1800,
      points: 900,
      items: ["Patience Booster", "Difficult Client Response Guide", "Golden Shield of Client Management"]
    },
    difficulty: "hard",
    status: "active",
    requirements: "Level 10+, Completed 'Client Relations' basic quest line",
    stages: 5,
    icon: <Skull className="h-10 w-10 text-purple-400" />
  },
  {
    id: "challenge-quest-1",
    title: "Cold Call Marathon",
    description: "Make 50 successful cold calls within 24 hours. Quality and conversion rate matter more than quantity.",
    type: "challenge",
    endDate: "Jun 15, 2025",
    timeRemaining: "24 hours",
    progress: 10,
    participants: 32,
    rewards: {
      xp: 1200,
      points: 600,
      items: ["Gold Telephone Badge", "Lead Generation Boost", "Title: 'Cold Call Champion'"]
    },
    difficulty: "medium",
    status: "active",
    requirements: "Level 6+, Sales role",
    icon: <Target className="h-10 w-10 text-green-400" />
  },
  {
    id: "event-quest-2",
    title: "Marketing Blitz",
    description: "A week-long marketing event requiring coordination across all marketing channels to launch a new product.",
    type: "time-limited-event",
    endDate: "Jul 15, 2025",
    timeRemaining: "20 days 8 hours",
    progress: 0,
    participants: 0, // Not started yet
    rewards: {
      xp: 2200,
      points: 1100,
      items: ["Creative Director Badge", "Market Influence Boost", "Exclusive Title: 'Trendsetter'"]
    },
    difficulty: "hard",
    status: "upcoming",
    requirements: "Level 7+, Marketing role or team",
    icon: <Globe className="h-10 w-10 text-cyan-400" />
  }
];

// Mock dungeons data
const mockDungeons = [
  {
    id: "dungeon-1",
    name: "The Boardroom Gauntlet",
    description: "Navigate a high-stakes boardroom presentation with unpredictable executives and challenging questions.",
    type: "dungeon",
    difficulty: "hard",
    minLevel: 12,
    participants: {
      current: 3,
      max: 5,
      roles: ["Sales", "Marketing", "Technical"]
    },
    stages: [
      {
        name: "Initial Pitch",
        description: "Deliver a compelling opening pitch that captures executive attention",
        rewards: {
          xp: 300,
          points: 150
        }
      },
      {
        name: "Technical Deep Dive",
        description: "Answer detailed technical questions about the product capabilities",
        rewards: {
          xp: 350,
          points: 175
        }
      },
      {
        name: "Budget Negotiation",
        description: "Navigate a tough negotiation with the finance department",
        rewards: {
          xp: 400,
          points: 200
        }
      },
      {
        name: "Objection Handling",
        description: "Address critical concerns from skeptical board members",
        rewards: {
          xp: 450,
          points: 225
        }
      },
      {
        name: "Final Boss: CEO Challenge",
        description: "Convince the CEO of the value proposition in a final showdown",
        rewards: {
          xp: 500,
          points: 250,
          item: "Legendary Badge: Executive Champion"
        }
      }
    ],
    totalReward: {
      xp: 2000,
      points: 1000,
      items: ["Executive Suite Access Card", "Board Member Network Connection", "Title: 'Boardroom Survivor'"]
    },
    cooldown: "7 days",
    icon: <Crown className="h-10 w-10 text-amber-400" />
  },
  {
    id: "dungeon-2",
    name: "Client Support Crisis",
    description: "Navigate a complex client support crisis with multiple escalations and technical challenges.",
    type: "dungeon",
    difficulty: "medium",
    minLevel: 8,
    participants: {
      current: 0,
      max: 4,
      roles: ["Support", "Technical", "Account Management"]
    },
    stages: [
      {
        name: "Initial Triage",
        description: "Identify the core issues and prioritize the response",
        rewards: {
          xp: 200,
          points: 100
        }
      },
      {
        name: "Technical Troubleshooting",
        description: "Diagnose and resolve complex technical issues",
        rewards: {
          xp: 250,
          points: 125
        }
      },
      {
        name: "Client Communication",
        description: "Maintain clear communication with the client throughout the crisis",
        rewards: {
          xp: 300,
          points: 150
        }
      },
      {
        name: "Final Solution Implementation",
        description: "Deploy the final solution and ensure client satisfaction",
        rewards: {
          xp: 350,
          points: 175,
          item: "Premium Support Badge"
        }
      }
    ],
    totalReward: {
      xp: 1500,
      points: 750,
      items: ["Crisis Management Handbook", "Client Trust Booster", "Title: 'Support Hero'"]
    },
    cooldown: "5 days",
    icon: <Shield className="h-10 w-10 text-blue-400" />
  }
];

// Mock leaderboard data
const mockLeaderboard = [
  {
    id: "team-1",
    name: "Sales Titans",
    members: 5,
    score: 12750,
    completedChallenges: 8,
    avatar: "ST",
    badge: "Quarter Champions"
  },
  {
    id: "team-2",
    name: "Marketing Wizards",
    members: 4,
    score: 11200,
    completedChallenges: 7,
    avatar: "MW",
    badge: "Creative Masters"
  },
  {
    id: "team-3",
    name: "Account Guardians",
    members: 6,
    score: 10500,
    completedChallenges: 6,
    avatar: "AG",
    badge: "Client Defenders"
  },
  {
    id: "user-1",
    name: "Alex Chen",
    role: "Sales Lead",
    score: 8900,
    completedChallenges: 5,
    avatar: "AC",
    badge: "Solo Champion"
  },
  {
    id: "user-2",
    name: "Sarah Kim",
    role: "Marketing Specialist",
    score: 8200,
    completedChallenges: 5,
    avatar: "SK",
    badge: "Marketing Maven"
  }
];

// Function to get difficulty badge
const getDifficultyBadge = (difficulty) => {
  switch (difficulty) {
    case 'easy':
      return <Badge className="bg-green-500/20 text-green-400 hover:bg-green-500/30">{difficulty}</Badge>;
    case 'medium':
      return <Badge className="bg-yellow-500/20 text-yellow-400 hover:bg-yellow-500/30">{difficulty}</Badge>;
    case 'hard':
      return <Badge className="bg-red-500/20 text-red-400 hover:bg-red-500/30">{difficulty}</Badge>;
    default:
      return <Badge>{difficulty}</Badge>;
  }
};

// Function to get type badge
const getTypeBadge = (type) => {
  switch (type) {
    case 'time-limited-event':
      return <Badge className="bg-purple-500/20 text-purple-400 hover:bg-purple-500/30">Event</Badge>;
    case 'raid':
      return <Badge className="bg-blue-500/20 text-blue-400 hover:bg-blue-500/30">Raid</Badge>;
    case 'dungeon':
      return <Badge className="bg-amber-500/20 text-amber-400 hover:bg-amber-500/30">Dungeon</Badge>;
    case 'challenge':
      return <Badge className="bg-green-500/20 text-green-400 hover:bg-green-500/30">Challenge</Badge>;
    default:
      return <Badge>{type}</Badge>;
  }
};

// Function to get status badge
const getStatusBadge = (status) => {
  switch (status) {
    case 'active':
      return <Badge className="bg-green-500/20 text-green-400 hover:bg-green-500/30">Active</Badge>;
    case 'upcoming':
      return <Badge className="bg-blue-500/20 text-blue-400 hover:bg-blue-500/30">Upcoming</Badge>;
    case 'completed':
      return <Badge className="bg-purple-500/20 text-purple-400 hover:bg-purple-500/30">Completed</Badge>;
    default:
      return <Badge>{status}</Badge>;
  }
};

export default function SpecialQuestsPage() {
  const router = useRouter();
  const { addNotification } = useNotification();
  const [activeTab, setActiveTab] = useState("events");
  const [selectedQuest, setSelectedQuest] = useState(null);
  const [showQuestDetail, setShowQuestDetail] = useState(false);
  const [selectedDungeon, setSelectedDungeon] = useState(null);
  const [showDungeonDetail, setShowDungeonDetail] = useState(false);
  const [showJoinDialog, setShowJoinDialog] = useState(false);

  // Handle join event/raid/challenge
  const handleJoinQuest = (quest) => {
    if (quest.status === "upcoming") {
      addNotification({
        type: "info",
        title: "Event Not Started",
        message: `${quest.title} hasn't started yet. You'll be notified when it begins.`,
        duration: 5000
      });
      return;
    }

    addNotification({
      type: "success",
      title: "Joined Special Quest",
      message: `You've successfully joined ${quest.title}!`,
      duration: 5000
    });
  };

  // Handle join dungeon
  const handleJoinDungeon = (dungeon) => {
    setSelectedDungeon(dungeon);
    setShowJoinDialog(true);
  };

  // Handle confirm dungeon join
  const handleConfirmDungeonJoin = () => {
    addNotification({
      type: "success",
      title: "Dungeon Party Joined",
      message: `You've joined the party for ${selectedDungeon.name}!`,
      duration: 5000
    });

    setShowJoinDialog(false);
  };

  // View quest details
  const handleViewQuestDetails = (quest) => {
    setSelectedQuest(quest);
    setShowQuestDetail(true);
  };

  // View dungeon details
  const handleViewDungeonDetails = (dungeon) => {
    setSelectedDungeon(dungeon);
    setShowDungeonDetail(true);
  };

  return (
    <div className="p-4 pb-20">
      <div className="flex items-center mb-6">
        <Button
          variant="ghost"
          size="icon"
          className="mr-2"
          onClick={() => {
            if (showQuestDetail || showDungeonDetail) {
              setShowQuestDetail(false);
              setShowDungeonDetail(false);
              setSelectedQuest(null);
              setSelectedDungeon(null);
            } else {
              router.push('/quest');
            }
          }}
        >
          <ChevronLeft className="h-5 w-5" />
        </Button>

        <div>
          <h1 className="text-2xl font-bold ai-gradient-text">Special Quests</h1>
          <p className="text-muted-foreground">Limited-time events, raids, and dungeons with premium rewards</p>
        </div>
      </div>

      {!showQuestDetail && !showDungeonDetail ? (
        <div>
          <Tabs defaultValue="events" onValueChange={setActiveTab}>
            <TabsList className="grid grid-cols-3 mb-4">
              <TabsTrigger value="events">Events</TabsTrigger>
              <TabsTrigger value="dungeons">Dungeons</TabsTrigger>
              <TabsTrigger value="leaderboard">Leaderboard</TabsTrigger>
            </TabsList>

            {/* Events, Raids & Challenges Tab */}
            <TabsContent value="events" className="space-y-4">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-lg font-medium">Limited-Time Events</h2>

                <Badge className="bg-purple-500/10 text-purple-400">
                  <Clock className="h-3 w-3 mr-1" />
                  Special Rewards
                </Badge>
              </div>

              {mockSpecialQuests.map((quest) => (
                <Card key={quest.id} className={`overflow-hidden quest-item-hover ${quest.status === "upcoming" ? "opacity-80" : ""}`}>
                  <CardContent className="p-4">
                    <div className="flex items-start">
                      <div className="p-3 bg-secondary/30 rounded-lg mr-4">
                        {quest.icon || <Flame className="h-10 w-10 text-red-400" />}
                      </div>

                      <div className="flex-1 space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="space-x-2">
                            <span className="font-medium">{quest.title}</span>
                            {getTypeBadge(quest.type)}
                            {getDifficultyBadge(quest.difficulty)}
                            {getStatusBadge(quest.status)}
                          </div>
                        </div>

                        <p className="text-sm text-muted-foreground">{quest.description}</p>

                        {quest.status !== "upcoming" && (
                          <div className="space-y-1">
                            <div className="flex items-center justify-between text-xs">
                              <span>Progress</span>
                              <span>{quest.progress}%</span>
                            </div>
                            <Progress value={quest.progress} className="h-1.5" />
                          </div>
                        )}

                        <div className="flex items-center justify-between text-xs">
                          <div className="flex items-center space-x-3">
                            <div className="flex items-center">
                              <Clock className="h-3 w-3 mr-1 text-muted-foreground" />
                              <span className="text-muted-foreground">
                                {quest.status === "upcoming" ? `Starts in ${quest.timeRemaining}` : `Ends in ${quest.timeRemaining}`}
                              </span>
                            </div>

                            <div className="flex items-center">
                              <Users className="h-3 w-3 mr-1 text-muted-foreground" />
                              <span className="text-muted-foreground">
                                {quest.participants} participants
                              </span>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              className="h-7 text-xs px-2"
                              onClick={() => handleViewQuestDetails(quest)}
                            >
                              Details
                            </Button>

                            <Button
                              size="sm"
                              className={`h-7 text-xs px-2 ${quest.status === "upcoming" ? "bg-blue-500" : "ai-gradient-bg"}`}
                              onClick={() => handleJoinQuest(quest)}
                            >
                              {quest.status === "upcoming" ? "Remind Me" : "Join"}
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </TabsContent>

            {/* Dungeons Tab */}
            <TabsContent value="dungeons" className="space-y-4">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-lg font-medium">Multi-Stage Dungeons</h2>

                <Badge className="bg-amber-500/10 text-amber-400">
                  <Crown className="h-3 w-3 mr-1" />
                  Epic Rewards
                </Badge>
              </div>

              {mockDungeons.map((dungeon) => (
                <Card key={dungeon.id} className="overflow-hidden quest-item-hover">
                  <CardContent className="p-4">
                    <div className="flex items-start">
                      <div className="p-3 bg-secondary/30 rounded-lg mr-4">
                        {dungeon.icon || <Skull className="h-10 w-10 text-purple-400" />}
                      </div>

                      <div className="flex-1 space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="space-x-2">
                            <span className="font-medium">{dungeon.name}</span>
                            {getTypeBadge(dungeon.type)}
                            {getDifficultyBadge(dungeon.difficulty)}
                          </div>
                        </div>

                        <p className="text-sm text-muted-foreground">{dungeon.description}</p>

                        <div className="flex items-center justify-between text-xs">
                          <div className="flex items-center space-x-3">
                            <div className="flex items-center">
                              <Users className="h-3 w-3 mr-1 text-muted-foreground" />
                              <span className="text-muted-foreground">
                                {dungeon.participants.current}/{dungeon.participants.max} party members
                              </span>
                            </div>

                            <div className="flex items-center">
                              <Clock className="h-3 w-3 mr-1 text-muted-foreground" />
                              <span className="text-muted-foreground">
                                {dungeon.stages.length} stages
                              </span>
                            </div>

                            <div className="flex items-center">
                              <Lock className="h-3 w-3 mr-1 text-muted-foreground" />
                              <span className="text-muted-foreground">
                                Min Level {dungeon.minLevel}
                              </span>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              className="h-7 text-xs px-2"
                              onClick={() => handleViewDungeonDetails(dungeon)}
                            >
                              Details
                            </Button>

                            <Button
                              size="sm"
                              className="h-7 text-xs px-2 ai-gradient-bg"
                              onClick={() => handleJoinDungeon(dungeon)}
                            >
                              Join Party
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </TabsContent>

            {/* Leaderboard Tab */}
            <TabsContent value="leaderboard" className="space-y-4">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-lg font-medium">Challenge Leaderboard</h2>

                <Badge className="bg-blue-500/10 text-blue-400">
                  <Trophy className="h-3 w-3 mr-1" />
                  Current Season
                </Badge>
              </div>

              <Card>
                <CardContent className="p-0">
                  <div className="p-3 border-b border-border flex items-center justify-between bg-secondary/10">
                    <div className="font-medium">Rank</div>
                    <div className="font-medium flex-1 ml-3">Name</div>
                    <div className="font-medium text-right">Score</div>
                  </div>

                  <div className="divide-y divide-border">
                    {mockLeaderboard.map((entry, index) => (
                      <div
                        key={entry.id}
                        className={`p-3 flex items-center ${index < 3 ? 'bg-secondary/5' : ''}`}
                      >
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold ${
                          index === 0
                            ? 'bg-yellow-500/20 text-yellow-400'
                            : index === 1
                            ? 'bg-slate-300/20 text-slate-300'
                            : index === 2
                            ? 'bg-amber-700/20 text-amber-700'
                            : 'bg-secondary/20 text-muted-foreground'
                        }`}>
                          {index + 1}
                        </div>

                        <div className="flex items-center flex-1 ml-3">
                          <Avatar className="h-8 w-8 mr-2">
                            <AvatarFallback>{entry.avatar}</AvatarFallback>
                          </Avatar>

                          <div>
                            <div className="font-medium flex items-center">
                              {entry.name}
                              <Badge className="ml-2 text-xs" variant="outline">
                                {entry.badge}
                              </Badge>
                            </div>
                            <div className="text-xs text-muted-foreground">
                              {entry.members
                                ? `${entry.members} members • ${entry.completedChallenges} challenges`
                                : `${entry.role} • ${entry.completedChallenges} challenges`}
                            </div>
                          </div>
                        </div>

                        <div className="text-right font-bold text-yellow-400">
                          {entry.score.toLocaleString()}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-secondary/5">
                <CardContent className="p-4">
                  <h3 className="font-medium mb-3 flex items-center">
                    <Trophy className="h-5 w-5 mr-2 text-yellow-400" />
                    Season Rewards
                  </h3>

                  <div className="space-y-3">
                    <div className="flex items-start">
                      <div className="bg-yellow-500/20 p-2 rounded-lg mr-3">
                        <Crown className="h-5 w-5 text-yellow-400" />
                      </div>
                      <div>
                        <p className="text-sm font-medium">1st Place - Champion's Trophy</p>
                        <p className="text-xs text-muted-foreground">
                          3000 Points, Exclusive "Season Champion" title, 50% XP boost for 30 days
                        </p>
                      </div>
                    </div>

                    <div className="flex items-start">
                      <div className="bg-slate-300/20 p-2 rounded-lg mr-3">
                        <Award className="h-5 w-5 text-slate-300" />
                      </div>
                      <div>
                        <p className="text-sm font-medium">2nd Place - Silver Medal</p>
                        <p className="text-xs text-muted-foreground">
                          2000 Points, "Silver Contender" title, 30% XP boost for 20 days
                        </p>
                      </div>
                    </div>

                    <div className="flex items-start">
                      <div className="bg-amber-700/20 p-2 rounded-lg mr-3">
                        <Award className="h-5 w-5 text-amber-700" />
                      </div>
                      <div>
                        <p className="text-sm font-medium">3rd Place - Bronze Medal</p>
                        <p className="text-xs text-muted-foreground">
                          1000 Points, "Bronze Achiever" title, 20% XP boost for 15 days
                        </p>
                      </div>
                    </div>

                    <div className="flex items-start">
                      <div className="bg-secondary/20 p-2 rounded-lg mr-3">
                        <MessageCircle className="h-5 w-5 text-muted-foreground" />
                      </div>
                      <div>
                        <p className="text-sm font-medium">Top 10 Participants</p>
                        <p className="text-xs text-muted-foreground">
                          500 Points, "Challenger" title, 10% XP boost for 10 days
                        </p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      ) : showQuestDetail ? (
        // Quest Detail View
        <div className="space-y-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-start">
                <div className="p-3 bg-secondary/30 rounded-lg mr-4">
                  {selectedQuest.icon || <Flame className="h-10 w-10 text-red-400" />}
                </div>

                <div className="flex-1 space-y-2">
                  <div className="flex items-center space-x-2">
                    <h2 className="text-xl font-medium">{selectedQuest.title}</h2>
                    {getTypeBadge(selectedQuest.type)}
                    {getDifficultyBadge(selectedQuest.difficulty)}
                  </div>

                  <p className="text-muted-foreground">{selectedQuest.description}</p>

                  {selectedQuest.progress > 0 && (
                    <div className="space-y-1">
                      <div className="flex items-center justify-between text-xs">
                        <span>Progress</span>
                        <span>{selectedQuest.progress}%</span>
                      </div>
                      <Progress value={selectedQuest.progress} className="h-2" />
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <Clock className="h-5 w-5 mr-2 text-blue-400" />
                  Event Information
                </CardTitle>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Status:</span>
                  <span>{getStatusBadge(selectedQuest.status)}</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">End Date:</span>
                  <span>{selectedQuest.endDate}</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Time Remaining:</span>
                  <span>{selectedQuest.timeRemaining}</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Participants:</span>
                  <span>{selectedQuest.participants}</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Requirements:</span>
                  <span>{selectedQuest.requirements}</span>
                </div>

                {selectedQuest.totalSlots && (
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Available Slots:</span>
                    <span>{selectedQuest.participants}/{selectedQuest.totalSlots}</span>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <Award className="h-5 w-5 mr-2 text-yellow-400" />
                  Rewards
                </CardTitle>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">XP:</span>
                  <span className="text-blue-400 font-bold">{selectedQuest.rewards.xp}</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Points:</span>
                  <span className="text-yellow-400 font-bold">{selectedQuest.rewards.points}</span>
                </div>

                <div className="space-y-2">
                  <div className="text-muted-foreground">Special Items:</div>
                  <ul className="space-y-2">
                    {selectedQuest.rewards.items.map((item, index) => (
                      <li key={index} className="flex items-center bg-secondary/10 p-2 rounded">
                        <Scroll className="h-4 w-4 mr-2 text-purple-400" />
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card className="bg-secondary/5">
            <CardContent className="p-4">
              <div className="flex items-start">
                <AlertTriangle className="h-5 w-5 mr-3 text-yellow-400 mt-0.5" />
                <div>
                  <h3 className="font-medium">Special Quest Rules</h3>
                  <p className="text-sm text-muted-foreground mt-1">
                    {selectedQuest.type === "time-limited-event" && (
                      "This is a time-limited event that will end at the specified date. All progress will be evaluated at the end of the event period."
                    )}
                    {selectedQuest.type === "raid" && (
                      "This raid requires team coordination. You must have at least 3 team members to participate effectively. Communication and coordination are key to success."
                    )}
                    {selectedQuest.type === "challenge" && (
                      "This challenge requires individual skill and effort. Your performance will be ranked against other participants. The top performers will receive additional rewards."
                    )}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => {
                setShowQuestDetail(false);
                setSelectedQuest(null);
              }}
            >
              Back
            </Button>

            <Button
              className={selectedQuest.status === "upcoming" ? "bg-blue-500" : "ai-gradient-bg"}
              onClick={() => handleJoinQuest(selectedQuest)}
            >
              {selectedQuest.status === "upcoming" ? "Set Reminder" : "Join Quest"}
            </Button>
          </div>
        </div>
      ) : (
        // Dungeon Detail View
        <div className="space-y-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-start">
                <div className="p-3 bg-secondary/30 rounded-lg mr-4">
                  {selectedDungeon.icon || <Skull className="h-10 w-10 text-purple-400" />}
                </div>

                <div className="flex-1 space-y-2">
                  <div className="flex items-center space-x-2">
                    <h2 className="text-xl font-medium">{selectedDungeon.name}</h2>
                    {getTypeBadge(selectedDungeon.type)}
                    {getDifficultyBadge(selectedDungeon.difficulty)}
                  </div>

                  <p className="text-muted-foreground">{selectedDungeon.description}</p>

                  <div className="flex items-center text-xs text-muted-foreground space-x-3">
                    <div className="flex items-center">
                      <Users className="h-3 w-3 mr-1" />
                      <span>
                        {selectedDungeon.participants.current}/{selectedDungeon.participants.max} party members
                      </span>
                    </div>

                    <div className="flex items-center">
                      <Clock className="h-3 w-3 mr-1" />
                      <span>
                        Cooldown: {selectedDungeon.cooldown}
                      </span>
                    </div>

                    <div className="flex items-center">
                      <Lock className="h-3 w-3 mr-1" />
                      <span>
                        Min Level {selectedDungeon.minLevel}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center">
                <Swords className="h-5 w-5 mr-2 text-blue-400" />
                Dungeon Stages
              </CardTitle>
            </CardHeader>

            <CardContent>
              <div className="space-y-4">
                {selectedDungeon.stages.map((stage, index) => (
                  <div key={index} className="relative">
                    {index > 0 && (
                      <div className="absolute left-6 -top-4 h-4 w-0.5 bg-border"></div>
                    )}

                    <div className={`flex items-start p-3 rounded-lg ${
                      index === selectedDungeon.stages.length - 1
                        ? 'bg-red-500/10 border border-red-500/20'
                        : 'bg-secondary/10'
                    }`}>
                      <div className={`w-12 h-12 rounded-full flex items-center justify-center mr-3 ${
                        index === selectedDungeon.stages.length - 1
                          ? 'bg-red-500/20'
                          : 'bg-secondary/20'
                      }`}>
                        <span className="font-bold text-lg">{index + 1}</span>
                      </div>

                      <div className="flex-1">
                        <div className="font-medium">{stage.name}</div>
                        <p className="text-sm text-muted-foreground">{stage.description}</p>

                        <div className="mt-2 text-sm">
                          <div className="flex items-center space-x-2">
                            <Trophy className="h-4 w-4 text-blue-400" />
                            <span>XP: {stage.rewards.xp}</span>
                            <span>•</span>
                            <span>Points: {stage.rewards.points}</span>
                            {stage.rewards.item && (
                              <>
                                <span>•</span>
                                <span className="text-purple-400">{stage.rewards.item}</span>
                              </>
                            )}
                          </div>
                        </div>
                      </div>

                      {index === selectedDungeon.stages.length - 1 && (
                        <Badge className="bg-red-500/20 text-red-400">
                          Boss Stage
                        </Badge>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <Users className="h-5 w-5 mr-2 text-green-400" />
                  Party Information
                </CardTitle>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Current Party:</span>
                  <span>{selectedDungeon.participants.current}/{selectedDungeon.participants.max} members</span>
                </div>

                <div>
                  <div className="text-muted-foreground mb-2">Recommended Roles:</div>
                  <div className="flex flex-wrap gap-2">
                    {selectedDungeon.participants.roles.map((role, index) => (
                      <Badge key={index} className="bg-blue-500/20 text-blue-400">
                        {role}
                      </Badge>
                    ))}
                  </div>
                </div>

                {selectedDungeon.participants.current > 0 && (
                  <div>
                    <div className="text-muted-foreground mb-2">Current Party Members:</div>
                    <div className="space-y-2">
                      <div className="flex items-center p-2 bg-secondary/10 rounded">
                        <Avatar className="h-8 w-8 mr-2">
                          <AvatarFallback>AC</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="text-sm font-medium">Alex Chen</div>
                          <div className="text-xs text-muted-foreground">Sales Lead, Level 15</div>
                        </div>
                        <Badge variant="outline">Leader</Badge>
                      </div>

                      <div className="flex items-center p-2 bg-secondary/10 rounded">
                        <Avatar className="h-8 w-8 mr-2">
                          <AvatarFallback>SK</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="text-sm font-medium">Sarah Kim</div>
                          <div className="text-xs text-muted-foreground">Marketing Specialist, Level 12</div>
                        </div>
                      </div>

                      <div className="flex items-center p-2 bg-secondary/10 rounded">
                        <Avatar className="h-8 w-8 mr-2">
                          <AvatarFallback>JR</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="text-sm font-medium">Juan Rodriguez</div>
                          <div className="text-xs text-muted-foreground">Technical Expert, Level 14</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <Award className="h-5 w-5 mr-2 text-yellow-400" />
                  Total Rewards
                </CardTitle>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Total XP:</span>
                  <span className="text-blue-400 font-bold">{selectedDungeon.totalReward.xp}</span>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Total Points:</span>
                  <span className="text-yellow-400 font-bold">{selectedDungeon.totalReward.points}</span>
                </div>

                <div className="space-y-2">
                  <div className="text-muted-foreground">Special Items:</div>
                  <ul className="space-y-2">
                    {selectedDungeon.totalReward.items.map((item, index) => (
                      <li key={index} className="flex items-center bg-secondary/10 p-2 rounded">
                        <Scroll className="h-4 w-4 mr-2 text-purple-400" />
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card className="bg-secondary/5">
            <CardContent className="p-4">
              <div className="flex items-start">
                <AlertTriangle className="h-5 w-5 mr-3 text-yellow-400 mt-0.5" />
                <div>
                  <h3 className="font-medium">Dungeon Rules</h3>
                  <p className="text-sm text-muted-foreground mt-1">
                    This dungeon requires team coordination and strategy. Each stage must be completed in sequence, and your party's performance will determine your rewards. If your party fails a stage, you can retry after a short cooldown. The dungeon will be available again after {selectedDungeon.cooldown} once completed.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => {
                setShowDungeonDetail(false);
                setSelectedDungeon(null);
              }}
            >
              Back
            </Button>

            <Button
              className="ai-gradient-bg"
              onClick={() => handleJoinDungeon(selectedDungeon)}
            >
              Join Dungeon Party
            </Button>
          </div>
        </div>
      )}

      {/* Join Dungeon Dialog */}
      <Dialog open={showJoinDialog} onOpenChange={setShowJoinDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Join Dungeon Party</DialogTitle>
            <DialogDescription>
              {selectedDungeon?.name} requires team coordination and strategy
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Select Your Role</label>
              <div className="grid grid-cols-2 gap-2">
                {selectedDungeon?.participants.roles.map((role, index) => (
                  <Button key={index} variant="outline" className="justify-start">
                    {role === "Sales" && <Sword className="h-4 w-4 mr-2 text-red-400" />}
                    {role === "Marketing" && <Globe className="h-4 w-4 mr-2 text-blue-400" />}
                    {role === "Technical" && <Zap className="h-4 w-4 mr-2 text-yellow-400" />}
                    {role === "Account Management" && <Shield className="h-4 w-4 mr-2 text-green-400" />}
                    {role === "Support" && <Users className="h-4 w-4 mr-2 text-purple-400" />}
                    {role}
                  </Button>
                ))}
              </div>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Message to Party (Optional)</label>
              <Input placeholder="Introduce yourself or specify your strengths" />
              <p className="text-xs text-muted-foreground">
                Your level and experience will be shown to other party members
              </p>
            </div>

            <div className="p-3 rounded-lg bg-yellow-500/10 flex items-start">
              <Info className="h-5 w-5 mr-2 text-yellow-400 mt-0.5" />
              <div>
                <p className="text-sm font-medium">Dungeon Requirements</p>
                <p className="text-xs">
                  Minimum Level: {selectedDungeon?.minLevel}<br />
                  Time Commitment: ~45 minutes<br />
                  Communication: Recommended
                </p>
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowJoinDialog(false)}>
              Cancel
            </Button>
            <Button onClick={handleConfirmDungeonJoin} className="ai-gradient-bg">
              Join Party
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
