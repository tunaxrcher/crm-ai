import { useCallback, useEffect, useRef } from 'react'

import { useQueryClient } from '@tanstack/react-query'

interface SmartPollingOptions {
  fastPollDuration?: number // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞ poll ‡πÄ‡∏£‡πá‡∏ß
  fastInterval?: number // interval ‡πÄ‡∏°‡∏∑‡πà‡∏≠ poll ‡πÄ‡∏£‡πá‡∏ß (ms)
  slowInterval?: number // interval ‡πÄ‡∏°‡∏∑‡πà‡∏≠ poll ‡∏ä‡πâ‡∏≤ (ms)
  queryKeys?: (string | number)[][] // query keys ‡∏ó‡∏µ‡πà‡∏à‡∏∞ refetch
  ultraFastMode?: boolean // ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö critical actions
}

export function useSmartPolling(options: SmartPollingOptions = {}) {
  const queryClient = useQueryClient()
  const {
    fastPollDuration = 8, // poll ‡πÄ‡∏£‡πá‡∏ß 8 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
    fastInterval = 800, // ‡∏ó‡∏∏‡∏Å 0.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
    slowInterval = 20000, // ‡∏ó‡∏∏‡∏Å 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
    queryKeys = [['notifications']], // default refetch notifications
    ultraFastMode = false, // ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
  } = options

  // ‡∏õ‡∏£‡∏±‡∏ö intervals ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ultra fast mode
  const actualFastInterval = ultraFastMode
    ? Math.min(fastInterval, 300)
    : fastInterval // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 300ms
  const actualFastDuration = ultraFastMode
    ? fastPollDuration + 5
    : fastPollDuration // ‡πÄ‡∏û‡∏¥‡πà‡∏° 5 cycles

  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const fastPollCountRef = useRef<number>(0)
  const isActiveRef = useRef<boolean>(true)
  const startSlowPollingRef = useRef<() => void>(() => {})

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô refetch ‡∏ï‡∏≤‡∏° query keys ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  const refetchQueries = useCallback(() => {
    if (!isActiveRef.current) return

    queryKeys.forEach((queryKey: (string | number)[]) => {
      queryClient.refetchQueries({ queryKey })
    })
  }, [queryClient, queryKeys])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° fast polling ‡∏´‡∏•‡∏±‡∏á user action
  const startFastPolling = useCallback(() => {
    const modeText = ultraFastMode ? 'üöÄ‚ö° ULTRA FAST' : 'üöÄ Fast'
    console.log(
      `${modeText} Polling - Starting for ${actualFastDuration} cycles every ${actualFastInterval}ms`
    )

    // Clear existing interval
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }

    fastPollCountRef.current = 0

    // Immediate refetch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    console.log('‚ö° Immediate refetch before fast polling starts')
    refetchQueries()

    intervalRef.current = setInterval(() => {
      queryKeys.forEach((queryKey: (string | number)[]) => {
        queryClient.refetchQueries({ queryKey })
      })
      fastPollCountRef.current++

      console.log(
        `‚ö° Fast poll cycle ${fastPollCountRef.current}/${actualFastDuration}`
      )

      // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å fast poll ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ slow polling
      if (fastPollCountRef.current >= actualFastDuration) {
        console.log('üêå Smart Polling - Switching to slow polling')
        if (intervalRef.current) {
          clearInterval(intervalRef.current)
          intervalRef.current = null
        }
        startSlowPollingRef.current()
      }
    }, actualFastInterval)
  }, [
    actualFastDuration,
    actualFastInterval,
    queryKeys,
    queryClient,
    ultraFastMode,
  ])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° slow polling ‡∏õ‡∏Å‡∏ï‡∏¥
  const startSlowPolling = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }

    intervalRef.current = setInterval(() => {
      if (isActiveRef.current) {
        queryKeys.forEach((queryKey: (string | number)[]) => {
          queryClient.refetchQueries({ queryKey })
        })
        console.log('üêå Slow poll cycle')
      }
    }, slowInterval)
  }, [slowInterval, queryKeys, queryClient])

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ref ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà function ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  startSlowPollingRef.current = startSlowPolling

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á user action ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° fast polling
  const triggerFastPolling = useCallback(() => {
    console.log(
      'üéØ Smart Polling - User action detected, triggering fast polling'
    )
    startFastPolling()
  }, [startFastPolling])

  // ‡∏´‡∏¢‡∏∏‡∏î polling ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  const pausePolling = useCallback(() => {
    isActiveRef.current = false
    console.log('‚è∏Ô∏è Smart Polling - Paused')
  }, [])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° polling ‡πÉ‡∏´‡∏°‡πà
  const resumePolling = useCallback(() => {
    isActiveRef.current = true
    console.log('‚ñ∂Ô∏è Smart Polling - Resumed')
  }, [])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° slow polling ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    console.log('üîÑ Smart Polling - Initialized with slow polling')
    startSlowPolling()

    return () => {
      console.log('üõë Smart Polling - Cleanup')
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }
  }, [startSlowPolling])

  // ‡∏´‡∏¢‡∏∏‡∏î polling ‡πÄ‡∏°‡∏∑‡πà‡∏≠ tab ‡πÑ‡∏°‡πà active
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        pausePolling()
      } else {
        resumePolling()
        // ‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå refetch ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        refetchQueries()
      }
    }

    document.addEventListener('visibilitychange', handleVisibilityChange)

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [pausePolling, resumePolling, refetchQueries])

  return {
    triggerFastPolling,
    pausePolling,
    resumePolling,
    isActive: isActiveRef.current,
  }
}
