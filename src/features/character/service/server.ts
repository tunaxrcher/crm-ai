import { userService } from '@src/features/user/service/server'
import { getServerSession } from '@src/lib/auth'
import { prisma } from '@src/lib/db'
import { s3UploadService } from '@src/lib/service/s3UploadService'
import { BaseService } from '@src/lib/service/server/baseService'
import bcrypt from 'bcrypt'
import 'server-only'

import { JobClassHelper } from '../helpers/jobClassHelper'
import { PortraitHelper } from '../helpers/portraitHelper'
import {
  CharacterRepository,
  JobClassRepository,
  JobLevelRepository,
  characterRepository,
  jobClassRepository,
  jobLevelRepository,
} from '../repository'
import {
  Character,
  CharacterConfirmPayload,
  CharacterConfirmResponse,
  CharacterGenerateResponse,
  GeneratedPortrait,
  JobLevel,
} from '../types'
import { openAIVisionService } from './openaiVisionService'
import { replicateService } from './replicateService'
import { StatsAllocationService } from './statsAllocationService'

export class CharacterService extends BaseService {
  private static instance: CharacterService
  private characterRepository: CharacterRepository

  constructor() {
    super()
    this.characterRepository = characterRepository
  }

  public static getInstance() {
    if (!CharacterService.instance) {
      CharacterService.instance = new CharacterService()
    }

    return CharacterService.instance
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° XP (‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û)
   */
  async addXP(characterId: number, amount: number) {
    const session = await getServerSession()
    const userId = +session.user.id

    console.log(`[Server] addXP To Character with ID: ${userId}`)

    const character =
      await CharacterRepository.findByIdWithJobLevels(characterId)
    if (!character) throw new Error('Character not found')

    let newCurrentXP = character.currentXP + amount
    let newLevel = character.level
    let newTotalXP = character.totalXP + amount
    let newNextLevelXP = character.nextLevelXP
    let levelsGained = 0

    const oldLevel = character.level

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö
    while (newCurrentXP >= newNextLevelXP) {
      newCurrentXP -= newNextLevelXP
      newLevel++
      levelsGained++
      newNextLevelXP = JobClassHelper.calculateNextLevelXP(newLevel)
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó XP ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° stats)
    const updatedCharacter =
      await CharacterRepository.updateCharacterWithPortraitAndJob(characterId, {
        currentXP: newCurrentXP,
        level: newLevel,
        totalXP: newTotalXP,
        nextLevelXP: newNextLevelXP,
      })

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô levelUp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ level
    let levelUpResults: any[] = []
    let totalUnlockedClassLevels: number[] = []
    let latestJobLevel = null
    let allAiReasonings: string[] = []

    if (levelsGained > 0) {
      console.log(
        `[AddXP] Character gained ${levelsGained} levels: ${oldLevel} ‚Üí ${newLevel}`
      )

      for (let i = 0; i < levelsGained; i++) {
        const currentLevelForLevelUp = oldLevel + i + 1
        console.log(
          `[AddXP] Processing level up for level ${currentLevelForLevelUp}`
        )

        try {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô levelUp ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó level (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß)
          const levelUpResult = await this.processLevelUp(
            characterId,
            currentLevelForLevelUp - 1,
            currentLevelForLevelUp,
            false // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó level ‡πÉ‡∏ô DB
          )

          levelUpResults.push(levelUpResult)

          if (levelUpResult.unlockedClassLevel)
            totalUnlockedClassLevels.push(levelUpResult.unlockedClassLevel)

          if (levelUpResult.newJobLevel)
            latestJobLevel = levelUpResult.newJobLevel

          if (levelUpResult.aiReasoning)
            allAiReasonings.push(
              `Lv.${currentLevelForLevelUp}: ${levelUpResult.aiReasoning}`
            )
        } catch (error) {
          console.error(
            `[AddXP] Error processing level up for level ${currentLevelForLevelUp}:`,
            error
          )
        }
      }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• character ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const getUserCharacters = await userService.getUserCharacters()

    return {
      character: getUserCharacters.character,
      leveledUp: levelsGained > 0,
      levelsGained,
      xpAdded: amount,
      unlockedClassLevels: totalUnlockedClassLevels,
      newJobLevel: latestJobLevel,
      portraitUpdated: totalUnlockedClassLevels.length > 0,
      aiReasonings: allAiReasonings,
      levelUpResults,
    }
  }

  /**
   * ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ processLevelUp)
   */
  async levelUp(characterId: number) {
    const session = await getServerSession()
    const userId = +session.user.id

    console.log(`[Server] levelUp To Character with ID: ${userId}`)

    const character =
      await CharacterRepository.findByIdWithJobLevels(characterId)
    if (!character) throw new Error('Character not found')

    const oldLevel = character.level
    const newLevel = character.level + 1

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô processLevelUp ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó level
    const result = await this.processLevelUp(
      characterId,
      oldLevel,
      newLevel,
      true
    )

    return {
      ...result,
      leveledUp: true,
      levelsGained: 1,
    }
  }

  /**
   * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û (‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ reuse)
   */
  private async processLevelUp(
    characterId: number,
    oldLevel: number,
    newLevel: number,
    shouldUpdateLevel: boolean = true
  ) {
    const character =
      await CharacterRepository.findByIdWithJobLevels(characterId)
    if (!character) throw new Error('Character not found')

    console.log(
      `[ProcessLevelUp] Processing level up: ${oldLevel} ‚Üí ${newLevel}`
    )

    // ‡πÉ‡∏ä‡πâ AI ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì stats
    const statGains = await StatsAllocationService.calculateStatGains(
      characterId,
      oldLevel,
      newLevel,
      character.jobClass.name
    )
    console.log(`[ProcessLevelUp] AI stat gains:`, statGains)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å class ‡πÉ‡∏´‡∏°‡πà
    const unlockedClassLevel = PortraitHelper.shouldUnlockNewClass(
      newLevel,
      oldLevel
    )
    let updatedPortraits = character.generatedPortraits
    let newPortraitUrl = character.currentPortraitUrl

    if (unlockedClassLevel) {
      updatedPortraits = PortraitHelper.updateGeneratedPortraits(
        character.generatedPortraits,
        unlockedClassLevel
      )

      newPortraitUrl = PortraitHelper.getCurrentPortraitUrl(
        newLevel,
        updatedPortraits
      )

      console.log(`[ProcessLevelUp] Unlocked class level ${unlockedClassLevel}`)
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó job level
    const jobLevelUpdate = JobClassHelper.shouldUpdateJobLevel(
      character.currentJobLevel,
      character.jobClass.levels,
      newLevel
    )

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Level History
    const levelHistory = await CharacterRepository.createLevelHistory({
      characterId,
      levelFrom: oldLevel,
      levelTo: newLevel,
      agiGained: statGains.agiGained,
      strGained: statGains.strGained,
      dexGained: statGains.dexGained,
      vitGained: statGains.vitGained,
      intGained: statGains.intGained,
      reasoning: `AI Analysis: ${statGains.reasoning}${unlockedClassLevel ? ` | Unlocked class level ${unlockedClassLevel}` : ''}`,
    })

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó character
    const updateData: any = {
      statAGI: character.statAGI + statGains.agiGained,
      statSTR: character.statSTR + statGains.strGained,
      statDEX: character.statDEX + statGains.dexGained,
      statVIT: character.statVIT + statGains.vitGained,
      statINT: character.statINT + statGains.intGained,
      statPoints: character.statPoints + 5,
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó level ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å levelUp ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
    if (shouldUpdateLevel) {
      updateData.level = newLevel
      updateData.currentXP = 0
      updateData.nextLevelXP = JobClassHelper.calculateNextLevelXP(newLevel)
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• portrait ‡πÅ‡∏•‡∏∞ job level ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if (unlockedClassLevel) {
      updateData.generatedPortraits = updatedPortraits
      updateData.currentPortraitUrl = newPortraitUrl
    }

    if (jobLevelUpdate.shouldUpdate && jobLevelUpdate.newJobLevel) {
      updateData.jobLevelId = jobLevelUpdate.newJobLevel.id
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Character
    const updatedCharacter =
      await CharacterRepository.updateCharacterWithPortraitAndJob(
        characterId,
        updateData
      )

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Feed Item
    let feedContent = `üéâ ${updatedCharacter.user.name} (${updatedCharacter.jobClass.name}) ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û‡∏à‡∏≤‡∏Å Lv.${levelHistory.levelFrom} ‡πÄ‡∏õ‡πá‡∏ô Lv.${levelHistory.levelTo}!`

    if (unlockedClassLevel) {
      feedContent += ` üåü ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà Level ${unlockedClassLevel}!`
    }

    if (jobLevelUpdate.shouldUpdate && jobLevelUpdate.newJobLevel) {
      feedContent += ` üëë ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô "${jobLevelUpdate.newJobLevel.title}"!`
    }

    feedContent += ` üí™ STR +${statGains.strGained} üß† INT +${statGains.intGained} üèÉ AGI +${statGains.agiGained} üéØ DEX +${statGains.dexGained} ‚ù§Ô∏è VIT +${statGains.vitGained}`

    // ‡πÅ‡∏™‡∏î‡∏á AI reasoning ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏ô feed
    const shortReasoning =
      statGains.reasoning.length > 100
        ? statGains.reasoning.substring(0, 100) + '...'
        : statGains.reasoning
    feedContent += ` | ü§ñ ${shortReasoning}`

    await CharacterRepository.createFeedItem({
      content: feedContent,
      type: 'level_up',
      mediaType: 'text',
      userId: updatedCharacter.userId,
      levelHistoryId: levelHistory.id,
    })

    const getUserCharacters = await userService.getUserCharacters()

    return {
      character: getUserCharacters.character,
      levelHistory,
      statGains,
      unlockedClassLevel,
      newJobLevel: jobLevelUpdate.newJobLevel,
      portraitUpdated: !!unlockedClassLevel,
      aiReasoning: statGains.reasoning,
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
   */
  async submitDailyQuest(characterId: number) {
    const character =
      await CharacterRepository.findByIdWithJobLevels(characterId)
    if (!character) throw new Error('Character not found')

    // ‡∏´‡∏≤ daily quest
    const dailyQuest = await CharacterRepository.findActiveDailyQuest()
    if (!dailyQuest) throw new Error('No daily quest available')

    // ‡πÄ‡∏ä‡πá‡∏Ñ assigned quest
    let assignedQuest = await CharacterRepository.findAssignedQuest(
      characterId,
      dailyQuest.id,
      'active'
    )

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á assigned quest ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!assignedQuest) {
      assignedQuest = await CharacterRepository.createAssignedQuest({
        questId: dailyQuest.id,
        characterId,
        userId: character.userId,
        status: 'active',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
      })
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Quest Submission
    const questSubmission = await CharacterRepository.createQuestSubmission({
      mediaType: 'text',
      description: `Completed daily quest: ${dailyQuest.title}`,
      ratingAGI: Math.floor(Math.random() * 5) + 1,
      ratingSTR: Math.floor(Math.random() * 5) + 1,
      ratingDEX: Math.floor(Math.random() * 5) + 1,
      ratingVIT: Math.floor(Math.random() * 5) + 1,
      ratingINT: Math.floor(Math.random() * 5) + 1,
      xpEarned: dailyQuest.xpReward,
      characterId,
      questId: dailyQuest.id,
    })

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ assigned quest
    await CharacterRepository.updateAssignedQuest(assignedQuest.id, {
      status: 'completed',
    })

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° XP (‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ processLevelUp ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û)
    const xpResult = await this.addXP(characterId, dailyQuest.xpReward)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Feed Item
    await CharacterRepository.createFeedItem({
      content: `${character.user.name} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™ "${dailyQuest.title}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${dailyQuest.xpReward} XP!`,
      type: 'quest_completion',
      mediaType: 'text',
      userId: character.userId,
      questSubmissionId: questSubmission.id,
    })

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ tokens
    await CharacterRepository.createQuestToken({
      userId: character.userId,
      questId: dailyQuest.id,
      characterId,
      tokensEarned: dailyQuest.baseTokenReward,
      bonusTokens: 0,
      multiplier: 1.0,
    })

    const userToken = await CharacterRepository.findUserToken(character.userId)
    if (userToken) {
      await CharacterRepository.updateUserToken(character.userId, {
        currentTokens: userToken.currentTokens + dailyQuest.baseTokenReward,
        totalEarnedTokens:
          userToken.totalEarnedTokens + dailyQuest.baseTokenReward,
      })
    }

    return {
      character: xpResult.character,
      questSubmission,
      xpEarned: dailyQuest.xpReward,
      tokensEarned: dailyQuest.baseTokenReward,
      leveledUp: xpResult.leveledUp,
      levelsGained: xpResult.levelsGained,
      unlockedClassLevels: xpResult.unlockedClassLevels,
      newJobLevel: xpResult.newJobLevel,
      aiReasonings: xpResult.aiReasonings,
    }
  }

  /**
   * Generate character portraits using AI
   */
  async generateCharacterPortraits(
    jobClassId: number,
    name: string,
    portraitType: 'upload' | 'generate',
    faceImageUrl?: string
  ): Promise<CharacterGenerateResponse> {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• job class ‡πÅ‡∏•‡∏∞ levels
    const jobClass = await jobClassRepository.findById(jobClassId)
    if (!jobClass) throw new Error('Job class not found')

    let portraits: GeneratedPortrait[] = []
    let personaTraits: string = this.generatePersonaTraits(jobClass.name)

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ upload ‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ OpenAI Vision
    if (portraitType === 'upload' && faceImageUrl) {
      console.log(
        '[CharacterService] Analyzing uploaded image with OpenAI Vision...'
      )
      const analysis =
        await openAIVisionService.analyzePersonaTraits(faceImageUrl)
      if (analysis) {
        personaTraits = analysis.fullDescription
        console.log('[CharacterService] Persona traits:', personaTraits)
      }
    }

    if (portraitType === 'generate') {
      // ‡πÉ‡∏ä‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û (‡πÅ‡∏Ñ‡πà level 1)
      portraits = await replicateService.generatePortraits(
        jobClass.name,
        jobClass.levels,
        undefined,
        personaTraits,
        '2'
      )
    } else if (portraitType === 'upload' && faceImageUrl) {
      // ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà upload ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô reference
      portraits = await replicateService.generatePortraits(
        jobClass.name,
        jobClass.levels,
        faceImageUrl,
        personaTraits,
        '2'
      )
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const sessionId = `char_gen_${Date.now()}_${Math.random().toString(36).substring(7)}`

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache ‡∏´‡∏£‡∏∑‡∏≠ session storage
    // ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ memory cache ‡∏á‡πà‡∏≤‡∏¢‡πÜ
    global.characterGenerationSessions =
      global.characterGenerationSessions || {}
    global.characterGenerationSessions[sessionId] = {
      jobClassId,
      name,
      portraits,
      originalFaceImage: faceImageUrl,
      personaTraits, // ‡πÄ‡∏Å‡πá‡∏ö persona traits ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
      createdAt: new Date(),
    }

    // ‡∏•‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000)
    Object.keys(global.characterGenerationSessions).forEach((key) => {
      if (global.characterGenerationSessions[key].createdAt < oneHourAgo) {
        delete global.characterGenerationSessions[key]
      }
    })

    return {
      portraits,
      sessionId,
    }
  }

  /**
   * Confirm and create character
   */
  async confirmCharacterCreation(
    payload: CharacterConfirmPayload
  ): Promise<CharacterConfirmResponse> {
    // const session = await getServerSession()

    const jobClassId = payload.jobClassId
    let userId: number
    let credentials: { username: string; password: string } | undefined

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    const rawPassword = Math.random().toString(36).substring(2, 15) // ‡∏™‡∏£‡πâ‡∏≤‡∏á password ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    const hashedPassword = await bcrypt.hash(rawPassword, 10)
    const username =
      payload.name.toLowerCase().replace(/\s+/g, '_') + '_' + Date.now()

    const newUser = await prisma.user.create({
      data: {
        email: `${username}@test.com`,
        username,
        password: hashedPassword,
        name: payload.name,
        avatar: payload.portraitUrl,
        level: 1,
        xp: 0,
      },
    })
    userId = newUser.id

    // ‡πÄ‡∏Å‡πá‡∏ö credentials ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ frontend
    credentials = { username, password: rawPassword }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• job class ‡πÅ‡∏•‡∏∞ first job level
    const jobClass = await jobClassRepository.findById(jobClassId)
    if (!jobClass) throw new Error('Job class not found')

    if (!jobClass || jobClass.levels.length === 0)
      throw new Error('Invalid job class')

    const firstJobLevel = jobClass.levels[0]

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° generatedPortraits ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å level
    const generatedPortraits: Record<string, string> = {
      '1': payload.portraitUrl,
      '10': '', // ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏∞ generate ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á level
      '35': '',
      '60': '',
      '80': '',
      '99': '',
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ originalFaceImage ‡∏à‡∏≤‡∏Å payload ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å session
    let originalFaceImage = payload.originalFaceImage
    let personaTraits = this.generatePersonaTraits(jobClass.name) // default traits

    if (global.characterGenerationSessions) {
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ session data
      const sessions = Object.values(global.characterGenerationSessions)
      const recentSession = sessions.find(
        (s: any) =>
          s.name === payload.name && s.jobClassId === payload.jobClassId
      )
      if (recentSession) {
        originalFaceImage = recentSession.originalFaceImage || originalFaceImage
        personaTraits = recentSession.personaTraits || personaTraits
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á character
    const character = await prisma.character.create({
      data: {
        name: payload.name,
        level: 1,
        currentXP: 0,
        nextLevelXP: 1000,
        totalXP: 0,
        statPoints: 0,
        statAGI: 10,
        statSTR: 10,
        statDEX: 10,
        statVIT: 10,
        statINT: 10,
        currentPortraitUrl: payload.portraitUrl,
        customPortrait: true,
        originalFaceImage: originalFaceImage || null,
        generatedPortraits: generatedPortraits,
        personaTraits: personaTraits,
        userId,
        jobClassId: payload.jobClassId,
        jobLevelId: firstJobLevel.id,
      },
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user token
    await prisma.userToken.create({
      data: {
        userId,
        currentTokens: 100, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ 100 tokens
        totalEarnedTokens: 100,
        totalSpentTokens: 0,
      },
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á quest streak
    await prisma.questStreak.create({
      data: {
        userId,
        currentStreak: 0,
        longestStreak: 0,
      },
    })

    return {
      success: true,
      character,
      userId,
      message: 'Character created successfully',
      credentials, // ‡∏™‡πà‡∏á credentials ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    }
  }

  private generatePersonaTraits(jobClassName: string): string {
    const traits: Record<string, string> = {
      ‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î:
        'bright confident eyes, styled hair, charismatic smile, and energetic posture',
      ‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:
        'focused eyes behind glasses, neat hair, serious expression, and organized appearance',
      ‡∏ô‡∏±‡∏Å‡∏Ç‡∏≤‡∏¢:
        'friendly eyes, approachable smile, neat appearance, and persuasive charm',
      ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ô‡∏≠‡∏£‡πå:
        'creative eyes, artistic hairstyle, unique fashion sense, and innovative aura',
      ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå:
        'intelligent eyes, casual hair, focused expression, and tech-savvy appearance',
      ‡∏ä‡πà‡∏≤‡∏á: 'practical eyes, short hair, determined face, and strong build',
    }

    return (
      traits[jobClassName] || 'professional appearance with confident demeanor'
    )
  }
}
export const characterService = CharacterService.getInstance()

export class JobClassService extends BaseService {
  private static instance: JobClassService
  private jobClassRepository: JobClassRepository

  constructor() {
    super()
    this.jobClassRepository = jobClassRepository
  }

  public static getInstance() {
    if (!JobClassService.instance) {
      JobClassService.instance = new JobClassService()
    }

    return JobClassService.instance
  }

  async getAllJobClasss() {
    return this.jobClassRepository.findAll()
  }

  async getJobClass(id: number) {
    return this.jobClassRepository.findById(id)
  }
}
export const jobClassService = JobClassService.getInstance()

export class JobLevelService extends BaseService {
  private static instance: JobLevelService
  private jobLevelRepository: JobLevelRepository

  constructor() {
    super()
    this.jobLevelRepository = jobLevelRepository
  }

  public static getInstance() {
    if (!JobLevelService.instance) {
      JobLevelService.instance = new JobLevelService()
    }

    return JobLevelService.instance
  }
}

export const jobLevelService = JobLevelService.getInstance()
